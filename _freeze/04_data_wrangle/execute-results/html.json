{
  "hash": "7e172a55798f6e477ec9a247bfb9cf69",
  "result": {
    "engine": "knitr",
    "markdown": "# Data Wrangling I: Creating Variables {#wrang1}\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n\n\nWe return to the university dataset from the beginning:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat1 <- data.frame(\n  studs = c(19173, 5333, 15643), \n  profs = c(322, 67, 210),\n  gegr  = c(1971, 1830, 1973),\n  prom_recht = rep(TRUE, 3),\n  uni = c(\"Uni Bremen\", \"Uni Vechta\", \"Uni Oldenburg\")\n)\n\ndat2 <- data.frame(\n  studs = c(14954, 47269, 23659, 9415, 38079), \n  profs = c(250, 553, 438, 150, 636),\n  prom_recht = c(FALSE, TRUE, TRUE, TRUE, FALSE),\n  gegr  = c(1971, 1870, 1457, 1818, 1995),\n  uni = c(\"FH Aachen\", \"RWTH Aachen\", \"Uni Freiburg\", \"Uni Bonn\", \"FH Bonn-Rhein-Sieg\")\n)\n\ndat1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  studs profs gegr prom_recht           uni\n1 19173   322 1971       TRUE    Uni Bremen\n2  5333    67 1830       TRUE    Uni Vechta\n3 15643   210 1973       TRUE Uni Oldenburg\n```\n\n\n:::\n\n```{.r .cell-code}\ndat2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  studs profs prom_recht gegr                uni\n1 14954   250      FALSE 1971          FH Aachen\n2 47269   553       TRUE 1870        RWTH Aachen\n3 23659   438       TRUE 1457       Uni Freiburg\n4  9415   150       TRUE 1818           Uni Bonn\n5 38079   636      FALSE 1995 FH Bonn-Rhein-Sieg\n```\n\n\n:::\n:::\n\n\n\n\nWith `bind_rows()` from `{dplyr}`, we can combine the two `data.frame`s:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat3 <- bind_rows(dat1, dat2)\ndat3\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  studs profs gegr prom_recht                uni\n1 19173   322 1971       TRUE         Uni Bremen\n2  5333    67 1830       TRUE         Uni Vechta\n3 15643   210 1973       TRUE      Uni Oldenburg\n4 14954   250 1971      FALSE          FH Aachen\n5 47269   553 1870       TRUE        RWTH Aachen\n6 23659   438 1457       TRUE       Uni Freiburg\n7  9415   150 1818       TRUE           Uni Bonn\n8 38079   636 1995      FALSE FH Bonn-Rhein-Sieg\n```\n\n\n:::\n:::\n\n\n\n\nThere is also `bind_cols()` to combine datasets column-wise. We'll learn more about merging datasets based on one or more identifier variables [later](#wrang3).\n\n## Creating Variables {#var}\n\nLet's take a closer look at creating variables in R. There are two basic ways to add variables to a `data.frame`:\n\n1. Base R: `...$newvar <-`   \n\n2. `{dplyr}`: `mutate(new_var= )`\n\n### Base R: `...$newvar <-`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat3$studs_to_mean <- dat3$studs - mean(dat3$studs)\ndat3\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  studs profs gegr prom_recht                uni studs_to_mean\n1 19173   322 1971       TRUE         Uni Bremen     -2517.625\n2  5333    67 1830       TRUE         Uni Vechta    -16357.625\n3 15643   210 1973       TRUE      Uni Oldenburg     -6047.625\n4 14954   250 1971      FALSE          FH Aachen     -6736.625\n5 47269   553 1870       TRUE        RWTH Aachen     25578.375\n6 23659   438 1457       TRUE       Uni Freiburg      1968.375\n7  9415   150 1818       TRUE           Uni Bonn    -12275.625\n8 38079   636 1995      FALSE FH Bonn-Rhein-Sieg     16388.375\n```\n\n\n:::\n:::\n\n\n\n\nYou can also delete variables using `<- NULL`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat3$studs_to_mean <- NULL\ndat3\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  studs profs gegr prom_recht                uni\n1 19173   322 1971       TRUE         Uni Bremen\n2  5333    67 1830       TRUE         Uni Vechta\n3 15643   210 1973       TRUE      Uni Oldenburg\n4 14954   250 1971      FALSE          FH Aachen\n5 47269   553 1870       TRUE        RWTH Aachen\n6 23659   438 1457       TRUE       Uni Freiburg\n7  9415   150 1818       TRUE           Uni Bonn\n8 38079   636 1995      FALSE FH Bonn-Rhein-Sieg\n```\n\n\n:::\n:::\n\n\n\n\n### {dplyr}: `mutate(new_var= )`\n\nAn alternative way to create variables is using `mutate(new_variable = )` from `{dplyr}` (`{tidyverse}`):\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat3 %>% mutate(studs_to_mean = studs - mean(studs))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  studs profs gegr prom_recht                uni studs_to_mean\n1 19173   322 1971       TRUE         Uni Bremen     -2517.625\n2  5333    67 1830       TRUE         Uni Vechta    -16357.625\n3 15643   210 1973       TRUE      Uni Oldenburg     -6047.625\n4 14954   250 1971      FALSE          FH Aachen     -6736.625\n5 47269   553 1870       TRUE        RWTH Aachen     25578.375\n6 23659   438 1457       TRUE       Uni Freiburg      1968.375\n7  9415   150 1818       TRUE           Uni Bonn    -12275.625\n8 38079   636 1995      FALSE FH Bonn-Rhein-Sieg     16388.375\n```\n\n\n:::\n:::\n\n\n\n\nYou can also create multiple variables within a single `mutate()` command:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat3 %>% mutate(\n  studs_to_mean = studs - mean(studs),\n  profs_to_mean = profs - mean(profs)\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  studs profs gegr prom_recht                uni studs_to_mean profs_to_mean\n1 19173   322 1971       TRUE         Uni Bremen     -2517.625         -6.25\n2  5333    67 1830       TRUE         Uni Vechta    -16357.625       -261.25\n3 15643   210 1973       TRUE      Uni Oldenburg     -6047.625       -118.25\n4 14954   250 1971      FALSE          FH Aachen     -6736.625        -78.25\n5 47269   553 1870       TRUE        RWTH Aachen     25578.375        224.75\n6 23659   438 1457       TRUE       Uni Freiburg      1968.375        109.75\n7  9415   150 1818       TRUE           Uni Bonn    -12275.625       -178.25\n8 38079   636 1995      FALSE FH Bonn-Rhein-Sieg     16388.375        307.75\n```\n\n\n:::\n:::\n\n\n\n\nOr variables can be reused within `mutate()`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat3 %>% mutate(\n  rel_to_mean = studs - mean(studs),\n  above_mean = rel_to_mean > 0\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  studs profs gegr prom_recht                uni rel_to_mean above_mean\n1 19173   322 1971       TRUE         Uni Bremen   -2517.625      FALSE\n2  5333    67 1830       TRUE         Uni Vechta  -16357.625      FALSE\n3 15643   210 1973       TRUE      Uni Oldenburg   -6047.625      FALSE\n4 14954   250 1971      FALSE          FH Aachen   -6736.625      FALSE\n5 47269   553 1870       TRUE        RWTH Aachen   25578.375       TRUE\n6 23659   438 1457       TRUE       Uni Freiburg    1968.375       TRUE\n7  9415   150 1818       TRUE           Uni Bonn  -12275.625      FALSE\n8 38079   636 1995      FALSE FH Bonn-Rhein-Sieg   16388.375       TRUE\n```\n\n\n:::\n:::\n\n\n\n\nThe original dataset remains unchanged:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat3\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  studs profs gegr prom_recht                uni\n1 19173   322 1971       TRUE         Uni Bremen\n2  5333    67 1830       TRUE         Uni Vechta\n3 15643   210 1973       TRUE      Uni Oldenburg\n4 14954   250 1971      FALSE          FH Aachen\n5 47269   553 1870       TRUE        RWTH Aachen\n6 23659   438 1457       TRUE       Uni Freiburg\n7  9415   150 1818       TRUE           Uni Bonn\n8 38079   636 1995      FALSE FH Bonn-Rhein-Sieg\n```\n\n\n:::\n:::\n\n\n\n\nTo keep the results, store them in an object:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat4 <- dat3 %>% mutate(\n  rel_to_mean = studs - mean(studs),\n  above_mean = rel_to_mean > 0\n)\n\ndat4\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  studs profs gegr prom_recht                uni rel_to_mean above_mean\n1 19173   322 1971       TRUE         Uni Bremen   -2517.625      FALSE\n2  5333    67 1830       TRUE         Uni Vechta  -16357.625      FALSE\n3 15643   210 1973       TRUE      Uni Oldenburg   -6047.625      FALSE\n4 14954   250 1971      FALSE          FH Aachen   -6736.625      FALSE\n5 47269   553 1870       TRUE        RWTH Aachen   25578.375       TRUE\n6 23659   438 1457       TRUE       Uni Freiburg    1968.375       TRUE\n7  9415   150 1818       TRUE           Uni Bonn  -12275.625      FALSE\n8 38079   636 1995      FALSE FH Bonn-Rhein-Sieg   16388.375       TRUE\n```\n\n\n:::\n:::\n\n\n\n\n::: {.callout-tip collapse=\"true\"}\n# Creating Dummy Variables with `as.numeric()`\n\nYou can convert logical variables into numeric dummy variables (0/1) using `as.numeric()`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat3 %>% mutate(\n  prom_dummy = as.numeric(prom_recht),\n  over10k = as.numeric(studs > 10000)\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  studs profs gegr prom_recht                uni prom_dummy over10k\n1 19173   322 1971       TRUE         Uni Bremen          1       1\n2  5333    67 1830       TRUE         Uni Vechta          1       0\n3 15643   210 1973       TRUE      Uni Oldenburg          1       1\n4 14954   250 1971      FALSE          FH Aachen          0       1\n5 47269   553 1870       TRUE        RWTH Aachen          1       1\n6 23659   438 1457       TRUE       Uni Freiburg          1       1\n7  9415   150 1818       TRUE           Uni Bonn          1       0\n8 38079   636 1995      FALSE FH Bonn-Rhein-Sieg          0       1\n```\n\n\n:::\n:::\n\n\n\n:::\n\n### [Exercise](#mutate1) {#ue06_1}\n\n## Grouping with `.by=` {#group_by}\n\nThe true power of `mutate()` becomes apparent when combined with other `{dplyr}` functions. A common task in data preparation involves grouped values.\n\nWeâ€™ll make our example dataset a bit smaller:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat5 <- dat3 %>% \n  select(-uni,-gegr) # to ensure everything is visible\n```\n:::\n\n\n\n\nSince `{dplyr}` version 1.1.1, we can specify a grouping directly in `mutate()` using the `.by=` argument. This `.by=` grouping is applied only to the immediate calculations within `mutate()`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat5 %>%\n  mutate(m_studs = mean(studs),\n         m_profs = mean(profs)) %>% \n  mutate(m_studs2 = mean(studs),\n         .by = prom_recht) %>% \n  mutate(m_profs2 = mean(profs))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  studs profs prom_recht  m_studs m_profs m_studs2 m_profs2\n1 19173   322       TRUE 21690.62  328.25  20082.0   328.25\n2  5333    67       TRUE 21690.62  328.25  20082.0   328.25\n3 15643   210       TRUE 21690.62  328.25  20082.0   328.25\n4 14954   250      FALSE 21690.62  328.25  26516.5   328.25\n5 47269   553       TRUE 21690.62  328.25  20082.0   328.25\n6 23659   438       TRUE 21690.62  328.25  20082.0   328.25\n7  9415   150       TRUE 21690.62  328.25  20082.0   328.25\n8 38079   636      FALSE 21690.62  328.25  26516.5   328.25\n```\n\n\n:::\n:::\n\n\n\n\nUsing `summarise()` instead of `mutate()` provides an overview:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat5 %>%\n  summarise(m_studs = mean(studs),.by = prom_recht)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  prom_recht m_studs\n1       TRUE 20082.0\n2      FALSE 26516.5\n```\n\n\n:::\n:::\n\n\n\n\n\n::: {.callout-tip collapse=\"true\"}\n\n## `group_by()`\n\nBefore `{dplyr}` 1.1.1, grouping a dataset relied on `group_by()`.\nAfter setting `group_by()` along the values of a variable, all subsequent `mutate()` calculations are performed only within those groups:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat5 %>%\n  mutate(m_studs = mean(studs),\n         m_profs = mean(profs)) %>% \n  group_by(prom_recht) %>%\n  mutate(m_studs2 = mean(studs),\n         m_profs2 = mean(profs))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8 Ã— 7\n# Groups:   prom_recht [2]\n  studs profs prom_recht m_studs m_profs m_studs2 m_profs2\n  <dbl> <dbl> <lgl>        <dbl>   <dbl>    <dbl>    <dbl>\n1 19173   322 TRUE        21691.    328.   20082       290\n2  5333    67 TRUE        21691.    328.   20082       290\n3 15643   210 TRUE        21691.    328.   20082       290\n4 14954   250 FALSE       21691.    328.   26516.      443\n5 47269   553 TRUE        21691.    328.   20082       290\n6 23659   438 TRUE        21691.    328.   20082       290\n7  9415   150 TRUE        21691.    328.   20082       290\n8 38079   636 FALSE       21691.    328.   26516.      443\n```\n\n\n:::\n:::\n\n\n\n\nAfter using `group_by()`, it's good practice to remove the grouping with `ungroup()` once it's no longer needed:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat5 %>%\n  mutate(m_studs = mean(studs),\n         m_profs = mean(profs)) %>% \n  group_by(prom_recht) %>%\n  mutate(m_studs2 = mean(studs)) %>% \n  ungroup() %>% \n  mutate(m_profs2 = mean(profs))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8 Ã— 7\n  studs profs prom_recht m_studs m_profs m_studs2 m_profs2\n  <dbl> <dbl> <lgl>        <dbl>   <dbl>    <dbl>    <dbl>\n1 19173   322 TRUE        21691.    328.   20082      328.\n2  5333    67 TRUE        21691.    328.   20082      328.\n3 15643   210 TRUE        21691.    328.   20082      328.\n4 14954   250 FALSE       21691.    328.   26516.     328.\n5 47269   553 TRUE        21691.    328.   20082      328.\n6 23659   438 TRUE        21691.    328.   20082      328.\n7  9415   150 TRUE        21691.    328.   20082      328.\n8 38079   636 FALSE       21691.    328.   26516.     328.\n```\n\n\n:::\n:::\n\n\n\n\n<!-- :heart: -->\n\n:::\n\n\n### [Exercise](#grpue) {#ue06_2}\n\n## `across()`: Processing Multiple Variables {#across}\n\nA highly versatile addition to `mutate()` and `summarise()` is `across()`. This allows us to apply a function to multiple columns simultaneously, without repeating code:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat3 %>%\n  summarise(studs = mean(studs),\n            profs = mean(profs))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     studs  profs\n1 21690.62 328.25\n```\n\n\n:::\n:::\n\n\n\n\nHere, `across()` offers a much shorter syntax for variable selection, and we can use [`?select_helpers`](02_intro.qmd#selecthelpers) like `matches()`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat3 %>%\n  summarise(across(.cols = matches(\"studs|profs\"),.fns = ~mean(.x)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     studs  profs\n1 21690.62 328.25\n```\n\n\n:::\n:::\n\n\n\n\nThis is also compatible with `.by=`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat3 %>%\n  summarise(across(matches(\"studs|profs\"), ~mean(.x)), .by= prom_recht)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  prom_recht   studs profs\n1       TRUE 20082.0   290\n2      FALSE 26516.5   443\n```\n\n\n:::\n:::\n\n\n\n\nWe can apply multiple functions by placing them in a `list()`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat3 %>%\n  summarise(across(matches(\"studs|profs\"), list(mean = ~mean(.x), sd = ~sd(.x))), .by= prom_recht)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  prom_recht studs_mean studs_sd profs_mean profs_sd\n1       TRUE    20082.0 14857.84        290 183.2081\n2      FALSE    26516.5 16351.84        443 272.9432\n```\n\n\n:::\n:::\n\n\n\n\nYou can define this `list()` in advance and use it later:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwert_liste <- list(MEAN = ~mean(.x), SD = ~sd(.x))\n\ndat3 %>%\n  summarise(across(matches(\"studs|profs\"), wert_liste), .by= prom_recht)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  prom_recht studs_MEAN studs_SD profs_MEAN profs_SD\n1       TRUE    20082.0 14857.84        290 183.2081\n2      FALSE    26516.5 16351.84        443 272.9432\n```\n\n\n:::\n:::\n\n\n\n\nThe `.names()` argument allows us to control the naming of columns. `{.fn}` stands for the function being applied, and `{.col}` represents the name of the variable being processed.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat3 %>%\n  summarise(across(matches(\"studs|profs\"), \n                   wert_liste,\n                   .names = \"{.fn}_{.col}\"),\n            .by= prom_recht)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  prom_recht MEAN_studs SD_studs MEAN_profs SD_profs\n1       TRUE    20082.0 14857.84        290 183.2081\n2      FALSE    26516.5 16351.84        443 272.9432\n```\n\n\n:::\n:::\n\n\n\n\nAll these functions also work with `mutate()`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat3 %>%\n  mutate(across(matches(\"studs|profs\"),\n                wert_liste, \n                .names = \"{.col}XX{.fn}\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  studs profs gegr prom_recht                uni studsXXMEAN studsXXSD\n1 19173   322 1971       TRUE         Uni Bremen    21690.62  14309.16\n2  5333    67 1830       TRUE         Uni Vechta    21690.62  14309.16\n3 15643   210 1973       TRUE      Uni Oldenburg    21690.62  14309.16\n4 14954   250 1971      FALSE          FH Aachen    21690.62  14309.16\n5 47269   553 1870       TRUE        RWTH Aachen    21690.62  14309.16\n6 23659   438 1457       TRUE       Uni Freiburg    21690.62  14309.16\n7  9415   150 1818       TRUE           Uni Bonn    21690.62  14309.16\n8 38079   636 1995      FALSE FH Bonn-Rhein-Sieg    21690.62  14309.16\n  profsXXMEAN profsXXSD\n1      328.25  199.0827\n2      328.25  199.0827\n3      328.25  199.0827\n4      328.25  199.0827\n5      328.25  199.0827\n6      328.25  199.0827\n7      328.25  199.0827\n8      328.25  199.0827\n```\n\n\n:::\n:::\n\n\n\n\n[More examples in the across() documentation](https://dplyr.tidyverse.org/reference/across.html)\n\n### [Exercise](#across_ue) {#ue06_3}\n\n## Custom Functions\n\nWhatâ€™s with the `~`[^tilde] in `across()`? Let's take a look at the basics of functions in R to understand.\n\n[^tilde]: \"tilde\": <br> **Windows**: Press `Alt Gr` + `*` (The asterisk is on the same key as the plus sign). <br> **macOS**: Press `Alt` (Option) + `N`, then press the space bar to insert the tilde.\n\nTo do so, letâ€™s examine three satisfaction variables for respondents in rows 12-16:\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div id=\"bfjqabzyrn\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>#bfjqabzyrn table {\n  font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n#bfjqabzyrn thead, #bfjqabzyrn tbody, #bfjqabzyrn tfoot, #bfjqabzyrn tr, #bfjqabzyrn td, #bfjqabzyrn th {\n  border-style: none;\n}\n\n#bfjqabzyrn p {\n  margin: 0;\n  padding: 0;\n}\n\n#bfjqabzyrn .gt_table {\n  display: table;\n  border-collapse: collapse;\n  line-height: normal;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 12px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#bfjqabzyrn .gt_caption {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n#bfjqabzyrn .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#bfjqabzyrn .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 3px;\n  padding-bottom: 5px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#bfjqabzyrn .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#bfjqabzyrn .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#bfjqabzyrn .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#bfjqabzyrn .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#bfjqabzyrn .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#bfjqabzyrn .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#bfjqabzyrn .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#bfjqabzyrn .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#bfjqabzyrn .gt_spanner_row {\n  border-bottom-style: hidden;\n}\n\n#bfjqabzyrn .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  text-align: left;\n}\n\n#bfjqabzyrn .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#bfjqabzyrn .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#bfjqabzyrn .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#bfjqabzyrn .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#bfjqabzyrn .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#bfjqabzyrn .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#bfjqabzyrn .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#bfjqabzyrn .gt_row_group_first th {\n  border-top-width: 2px;\n}\n\n#bfjqabzyrn .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#bfjqabzyrn .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #D3D3D3;\n}\n\n#bfjqabzyrn .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#bfjqabzyrn .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#bfjqabzyrn .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#bfjqabzyrn .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#bfjqabzyrn .gt_last_grand_summary_row_top {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: double;\n  border-bottom-width: 6px;\n  border-bottom-color: #D3D3D3;\n}\n\n#bfjqabzyrn .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#bfjqabzyrn .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#bfjqabzyrn .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#bfjqabzyrn .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#bfjqabzyrn .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#bfjqabzyrn .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#bfjqabzyrn .gt_left {\n  text-align: left;\n}\n\n#bfjqabzyrn .gt_center {\n  text-align: center;\n}\n\n#bfjqabzyrn .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#bfjqabzyrn .gt_font_normal {\n  font-weight: normal;\n}\n\n#bfjqabzyrn .gt_font_bold {\n  font-weight: bold;\n}\n\n#bfjqabzyrn .gt_font_italic {\n  font-style: italic;\n}\n\n#bfjqabzyrn .gt_super {\n  font-size: 65%;\n}\n\n#bfjqabzyrn .gt_footnote_marks {\n  font-size: 75%;\n  vertical-align: 0.4em;\n  position: initial;\n}\n\n#bfjqabzyrn .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#bfjqabzyrn .gt_indent_1 {\n  text-indent: 5px;\n}\n\n#bfjqabzyrn .gt_indent_2 {\n  text-indent: 10px;\n}\n\n#bfjqabzyrn .gt_indent_3 {\n  text-indent: 15px;\n}\n\n#bfjqabzyrn .gt_indent_4 {\n  text-indent: 20px;\n}\n\n#bfjqabzyrn .gt_indent_5 {\n  text-indent: 25px;\n}\n\n#bfjqabzyrn .katex-display {\n  display: inline-flex !important;\n  margin-bottom: 0.75em !important;\n}\n\n#bfjqabzyrn div.Reactable > div.rt-table > div.rt-thead > div.rt-tr.rt-tr-group-header > div.rt-th-group:after {\n  height: 0px !important;\n}\n</style>\n<table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\">\n  <thead>\n    <tr class=\"gt_col_headings\">\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_center\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"variable\">variable</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Important regarding job\">Important regarding job</th>\n    </tr>\n  </thead>\n  <tbody class=\"gt_table_body\">\n    <tr><td headers=\"variable\" class=\"gt_row gt_center\" style=\"font-family: Roboto;\"><div data-qmd-base64=\"YFBFTzAzMDBhYA==\"><div class='gt_from_md'><p><code>PEO0300a</code></p>\n</div></div></td>\n<td headers=\"Important regarding job\" class=\"gt_row gt_left\"> To earn a lot of money</td></tr>\n    <tr><td headers=\"variable\" class=\"gt_row gt_center\" style=\"font-family: Roboto;\"><div data-qmd-base64=\"YFBFTzAzMDBiYA==\"><div class='gt_from_md'><p><code>PEO0300b</code></p>\n</div></div></td>\n<td headers=\"Important regarding job\" class=\"gt_row gt_left\"> A job, that is fun</td></tr>\n    <tr><td headers=\"variable\" class=\"gt_row gt_center\" style=\"font-family: Roboto;\"><div data-qmd-base64=\"YFBFTzAzMDBjYA==\"><div class='gt_from_md'><p><code>PEO0300c</code></p>\n</div></div></td>\n<td headers=\"Important regarding job\" class=\"gt_row gt_left\"> Good career opportunities</td></tr>\n    <tr><td headers=\"variable\" class=\"gt_row gt_center\" style=\"font-family: Roboto;\"><div data-qmd-base64=\"YFBFTzAzMDBkYA==\"><div class='gt_from_md'><p><code>PEO0300d</code></p>\n</div></div></td>\n<td headers=\"Important regarding job\" class=\"gt_row gt_left\"> Job security</td></tr>\n    <tr><td headers=\"variable\" class=\"gt_row gt_center\" style=\"font-family: Roboto;\"><div data-qmd-base64=\"YFBFTzAzMDBlYA==\"><div class='gt_from_md'><p><code>PEO0300e</code></p>\n</div></div></td>\n<td headers=\"Important regarding job\" class=\"gt_row gt_left\"> Job where you can show off your abilities</td></tr>\n  </tbody>\n  \n  \n</table>\n</div>\n```\n\n:::\n\n::: {.cell-output-display}\n\n```{=html}\n<div id=\"wenitdabwk\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>#wenitdabwk table {\n  font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n#wenitdabwk thead, #wenitdabwk tbody, #wenitdabwk tfoot, #wenitdabwk tr, #wenitdabwk td, #wenitdabwk th {\n  border-style: none;\n}\n\n#wenitdabwk p {\n  margin: 0;\n  padding: 0;\n}\n\n#wenitdabwk .gt_table {\n  display: table;\n  border-collapse: collapse;\n  line-height: normal;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 11px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#wenitdabwk .gt_caption {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n#wenitdabwk .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#wenitdabwk .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 3px;\n  padding-bottom: 5px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#wenitdabwk .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#wenitdabwk .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#wenitdabwk .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#wenitdabwk .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#wenitdabwk .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#wenitdabwk .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#wenitdabwk .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#wenitdabwk .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#wenitdabwk .gt_spanner_row {\n  border-bottom-style: hidden;\n}\n\n#wenitdabwk .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  text-align: left;\n}\n\n#wenitdabwk .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#wenitdabwk .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#wenitdabwk .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#wenitdabwk .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#wenitdabwk .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#wenitdabwk .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#wenitdabwk .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#wenitdabwk .gt_row_group_first th {\n  border-top-width: 2px;\n}\n\n#wenitdabwk .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#wenitdabwk .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #D3D3D3;\n}\n\n#wenitdabwk .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#wenitdabwk .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#wenitdabwk .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#wenitdabwk .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#wenitdabwk .gt_last_grand_summary_row_top {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: double;\n  border-bottom-width: 6px;\n  border-bottom-color: #D3D3D3;\n}\n\n#wenitdabwk .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#wenitdabwk .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#wenitdabwk .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#wenitdabwk .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#wenitdabwk .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#wenitdabwk .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#wenitdabwk .gt_left {\n  text-align: left;\n}\n\n#wenitdabwk .gt_center {\n  text-align: center;\n}\n\n#wenitdabwk .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#wenitdabwk .gt_font_normal {\n  font-weight: normal;\n}\n\n#wenitdabwk .gt_font_bold {\n  font-weight: bold;\n}\n\n#wenitdabwk .gt_font_italic {\n  font-style: italic;\n}\n\n#wenitdabwk .gt_super {\n  font-size: 65%;\n}\n\n#wenitdabwk .gt_footnote_marks {\n  font-size: 75%;\n  vertical-align: 0.4em;\n  position: initial;\n}\n\n#wenitdabwk .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#wenitdabwk .gt_indent_1 {\n  text-indent: 5px;\n}\n\n#wenitdabwk .gt_indent_2 {\n  text-indent: 10px;\n}\n\n#wenitdabwk .gt_indent_3 {\n  text-indent: 15px;\n}\n\n#wenitdabwk .gt_indent_4 {\n  text-indent: 20px;\n}\n\n#wenitdabwk .gt_indent_5 {\n  text-indent: 25px;\n}\n\n#wenitdabwk .katex-display {\n  display: inline-flex !important;\n  margin-bottom: 0.75em !important;\n}\n\n#wenitdabwk div.Reactable > div.rt-table > div.rt-thead > div.rt-tr.rt-tr-group-header > div.rt-th-group:after {\n  height: 0px !important;\n}\n</style>\n<table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\">\n  <thead>\n    <tr class=\"gt_col_headings\">\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"-10 bis -1\">-10 bis -1</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"1\">1</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"2\">2</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"3\">3</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"4\">4</th>\n    </tr>\n  </thead>\n  <tbody class=\"gt_table_body\">\n    <tr><td headers=\"-10 bis -1\" class=\"gt_row gt_left\">t.n.z./k.A.</td>\n<td headers=\"1\" class=\"gt_row gt_left\">Very important</td>\n<td headers=\"2\" class=\"gt_row gt_left\">Rather important</td>\n<td headers=\"3\" class=\"gt_row gt_left\">Rather not important</td>\n<td headers=\"4\" class=\"gt_row gt_left\">Not important at all</td></tr>\n  </tbody>\n  \n  \n</table>\n</div>\n```\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npend <- haven::read_dta(\"./orig/PENDDAT_cf_W13.dta\")\n\nsat_small <- \n  pend %>% \n    filter(welle == 1) %>% \n    select(matches(\"PEO0300(a|b|c)\")) %>% \n    slice(12:16) %>% \n    haven::zap_labels() %>% haven::zap_label() # remove labels\nsat_small\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 Ã— 3\n  PEO0300a PEO0300b PEO0300c\n     <dbl>    <dbl>    <dbl>\n1        2        3        2\n2        1        1        3\n3        1        1        3\n4        2        1        1\n5        1        1        2\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsat_small <- sat_small %>% mutate(across(everything(),~as.numeric(.x)))\n```\n:::\n\n\n\n\nSometimes we want to process multiple variables in the same way. Above, we saw how to handle this with [`across()`](#across) for existing functions. But what if we want to perform a calculation that isn't as simple as applying `mean()`, `sd()`, etc.?\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsat_small %>% \n  mutate(dmean_PEO0300a = PEO0300a - mean(PEO0300a,na.rm = T),\n         dmean_PEO0300c = PEO0300c - mean(PEO0300c,na.rm = T))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 Ã— 5\n  PEO0300a PEO0300b PEO0300c dmean_PEO0300a dmean_PEO0300c\n     <dbl>    <dbl>    <dbl>          <dbl>          <dbl>\n1        2        3        2            0.6         -0.200\n2        1        1        3           -0.4          0.8  \n3        1        1        3           -0.4          0.8  \n4        2        1        1            0.6         -1.2  \n5        1        1        2           -0.4         -0.200\n```\n\n\n:::\n:::\n\n\n\n\n...and now what about `F1450_06`? Typing this out three times would violate the \"DRY\" principle[^dry], especially considering the PASS CampusFile contains 5 columns of similar satisfaction variables. Copying and pasting is not a practical option.\n\n[^dry]: Do not repeat yourself, see [Wickham et al](https://r4ds.had.co.nz/functions.html): \"You should consider writing a function whenever youâ€™ve copied and pasted a block of code more than twice (i.e. you now have three copies of the same code).\"\n\nCustom functions allow us to adhere to the DRY principle in R. We'll make our calculation steps part of a `function()` and apply it to the desired variables. A function takes an input, defined as a placeholder within the `()`. This placeholder is used within the function, and we return the result with `return()`. Only one output can be returned:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndtomean <- function(x){\n  d_x <- x - mean(x,na.rm = T)\n  return(d_x)\n}\n```\n:::\n\n\n\nHow can we now apply our function `dtomean()` to the variables from our `sat_small`?  \nIn principle, we saw [at the beginning](#02_intro) that a `data.frame` is simply a combined collection of vectors (the variables).  \nAccordingly, we can now apply our `dtomean()` to a variable (a vector) by calling it with `data.frame$variablename`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndtomean(sat_small$PEO0300a)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  0.6 -0.4 -0.4  0.6 -0.4\n```\n\n\n:::\n:::\n\n\n\n\nTo apply our function to each variable of a `data.frame`, we can use `lapply()` - the output will then be a list, with elements named after the variable names:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlapply(sat_small,FUN = dtomean)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$PEO0300a\n[1]  0.6 -0.4 -0.4  0.6 -0.4\n\n$PEO0300b\n[1]  1.6 -0.4 -0.4 -0.4 -0.4\n\n$PEO0300c\n[1] -0.2  0.8  0.8 -1.2 -0.2\n```\n\n\n:::\n\n```{.r .cell-code}\nres <- lapply(sat_small,FUN = dtomean)\nclass(res)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"list\"\n```\n\n\n:::\n:::\n\n\n\n\n`map()` from `{purrr}` is an alternative to `lapply`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsat_small %>% map(~dtomean(.x))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$PEO0300a\n[1]  0.6 -0.4 -0.4  0.6 -0.4\n\n$PEO0300b\n[1]  1.6 -0.4 -0.4 -0.4 -0.4\n\n$PEO0300c\n[1] -0.2  0.8  0.8 -1.2 -0.2\n```\n\n\n:::\n:::\n\n\n\nThis *formula syntax* can also be found in `across()` - additionally, with `.names =` we have the option to modify the variable names for the results:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsat_small %>% \n  mutate(across(matches(\"PEO0300\"),~dtomean(.x),.names = \"dmean_{.col}\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 Ã— 6\n  PEO0300a PEO0300b PEO0300c dmean_PEO0300a dmean_PEO0300b dmean_PEO0300c\n     <dbl>    <dbl>    <dbl>          <dbl>          <dbl>          <dbl>\n1        2        3        2            0.6            1.6         -0.200\n2        1        1        3           -0.4           -0.4          0.8  \n3        1        1        3           -0.4           -0.4          0.8  \n4        2        1        1            0.6           -0.4         -1.2  \n5        1        1        2           -0.4           -0.4         -0.200\n```\n\n\n:::\n:::\n\n\n\n\n\n### [Exercise](#fnct) {#ue06_4}\n\n\n## Exercises\n\n### Exercise {#mutate1}\n\n+ Create `dat3` as [shown above](#var) from `dat1` and `dat2`.\n+ Calculate the student-to-professor ratio (students per professor `studs/profs`) at the universities relative to the mean of the ratio (`rel_studprofs`).\n+ Is the ratio above or below the mean? How can you adjust the command so that the variable `rel_studprofs` only contains `TRUE` or `FALSE` instead of numeric values?\n+ Convert `rel_studprofs` into a dummy variable with 0/1 values instead of `TRUE`/`FALSE`.\n\n::: callout-tip\n\nA rule of thumb to decide whether `mutate()` or `...$newvar <-` is more suitable: Whenever it's just about quickly creating/deleting a variable, `...$newvar <-` is the simpler choice. When it goes beyond that, `mutate()` offers significant advantages ([next section](#group_by)).\n\n:::\n\n[Back to top](#ue06_1)\n\n\n### Exercise {#grp_ue}\n\n+ Continue using the university dataset.\n+ Calculate the student-to-professor ratio (`studprofs`) relative to the mean, separated by universities with and without the right to award doctorates, and add this as a new column.\n\n[Back to top](#ue06_2)\n\n### Exercise {#across_ue}\n\n+ Use the `pend_small` dataset:\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npend_small <- haven::read_dta(\"./orig/PENDDAT_cf_W13.dta\",\n                               col_select = c(\"welle\",\"zpsex\",\"PEO0400a\",\"PEO0400b\",\"PEO0400c\",\"PEO0400d\")\n                               ) %>% \n  filter(welle == 2) %>% \n  slice(1:15)\n```\n:::\n\n\n\n\n+ Calculate the mean for the variables `PEO0400a`, `PEO0400b`, `PEO0400c`, and `PEO0400d`:\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div id=\"mzfqqzxaqx\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>#mzfqqzxaqx table {\n  font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n#mzfqqzxaqx thead, #mzfqqzxaqx tbody, #mzfqqzxaqx tfoot, #mzfqqzxaqx tr, #mzfqqzxaqx td, #mzfqqzxaqx th {\n  border-style: none;\n}\n\n#mzfqqzxaqx p {\n  margin: 0;\n  padding: 0;\n}\n\n#mzfqqzxaqx .gt_table {\n  display: table;\n  border-collapse: collapse;\n  line-height: normal;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 12px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#mzfqqzxaqx .gt_caption {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n#mzfqqzxaqx .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#mzfqqzxaqx .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 3px;\n  padding-bottom: 5px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#mzfqqzxaqx .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#mzfqqzxaqx .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#mzfqqzxaqx .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#mzfqqzxaqx .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#mzfqqzxaqx .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#mzfqqzxaqx .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#mzfqqzxaqx .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#mzfqqzxaqx .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#mzfqqzxaqx .gt_spanner_row {\n  border-bottom-style: hidden;\n}\n\n#mzfqqzxaqx .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  text-align: left;\n}\n\n#mzfqqzxaqx .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#mzfqqzxaqx .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#mzfqqzxaqx .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#mzfqqzxaqx .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#mzfqqzxaqx .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#mzfqqzxaqx .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#mzfqqzxaqx .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#mzfqqzxaqx .gt_row_group_first th {\n  border-top-width: 2px;\n}\n\n#mzfqqzxaqx .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#mzfqqzxaqx .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #D3D3D3;\n}\n\n#mzfqqzxaqx .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#mzfqqzxaqx .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#mzfqqzxaqx .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#mzfqqzxaqx .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#mzfqqzxaqx .gt_last_grand_summary_row_top {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: double;\n  border-bottom-width: 6px;\n  border-bottom-color: #D3D3D3;\n}\n\n#mzfqqzxaqx .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#mzfqqzxaqx .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#mzfqqzxaqx .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#mzfqqzxaqx .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#mzfqqzxaqx .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#mzfqqzxaqx .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#mzfqqzxaqx .gt_left {\n  text-align: left;\n}\n\n#mzfqqzxaqx .gt_center {\n  text-align: center;\n}\n\n#mzfqqzxaqx .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#mzfqqzxaqx .gt_font_normal {\n  font-weight: normal;\n}\n\n#mzfqqzxaqx .gt_font_bold {\n  font-weight: bold;\n}\n\n#mzfqqzxaqx .gt_font_italic {\n  font-style: italic;\n}\n\n#mzfqqzxaqx .gt_super {\n  font-size: 65%;\n}\n\n#mzfqqzxaqx .gt_footnote_marks {\n  font-size: 75%;\n  vertical-align: 0.4em;\n  position: initial;\n}\n\n#mzfqqzxaqx .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#mzfqqzxaqx .gt_indent_1 {\n  text-indent: 5px;\n}\n\n#mzfqqzxaqx .gt_indent_2 {\n  text-indent: 10px;\n}\n\n#mzfqqzxaqx .gt_indent_3 {\n  text-indent: 15px;\n}\n\n#mzfqqzxaqx .gt_indent_4 {\n  text-indent: 20px;\n}\n\n#mzfqqzxaqx .gt_indent_5 {\n  text-indent: 25px;\n}\n\n#mzfqqzxaqx .katex-display {\n  display: inline-flex !important;\n  margin-bottom: 0.75em !important;\n}\n\n#mzfqqzxaqx div.Reactable > div.rt-table > div.rt-thead > div.rt-tr.rt-tr-group-header > div.rt-th-group:after {\n  height: 0px !important;\n}\n</style>\n<table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\">\n  <thead>\n    <tr class=\"gt_col_headings\">\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_center\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"var\">var</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"lab\">lab</th>\n    </tr>\n  </thead>\n  <tbody class=\"gt_table_body\">\n    <tr><td headers=\"var\" class=\"gt_row gt_center\"><div data-qmd-base64=\"YFBFTzA0MDBhYA==\"><div class='gt_from_md'><p><code>PEO0400a</code></p>\n</div></div></td>\n<td headers=\"lab\" class=\"gt_row gt_left\">Family/job: Woman should be willing to reduce her working hours for family</td></tr>\n    <tr><td headers=\"var\" class=\"gt_row gt_center\"><div data-qmd-base64=\"YFBFTzA0MDBiYA==\"><div class='gt_from_md'><p><code>PEO0400b</code></p>\n</div></div></td>\n<td headers=\"lab\" class=\"gt_row gt_left\">Family/job: What women really want is a home and children</td></tr>\n    <tr><td headers=\"var\" class=\"gt_row gt_center\"><div data-qmd-base64=\"YFBFTzA0MDBjYA==\"><div class='gt_from_md'><p><code>PEO0400c</code></p>\n</div></div></td>\n<td headers=\"lab\" class=\"gt_row gt_left\">Family/job: Working mother can have an equally warm relationship with her childr</td></tr>\n    <tr><td headers=\"var\" class=\"gt_row gt_center\"><div data-qmd-base64=\"YFBFTzA0MDBkYA==\"><div class='gt_from_md'><p><code>PEO0400d</code></p>\n</div></div></td>\n<td headers=\"lab\" class=\"gt_row gt_left\">Family/job: Responsibility of husband: To earn money; responsibility of wife: Ho</td></tr>\n  </tbody>\n  \n  \n</table>\n</div>\n```\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   welle zpsex PEO0400a PEO0400b PEO0400c PEO0400d\n1      2     2        1        1        4        1\n2      2     1        2        1        3        2\n3      2     2        1        3        1        4\n4      2     2        1        1        4        1\n5      2     2        1        1        1        1\n6      2     1        1        1        1        1\n7      2     1        1        2        1        4\n8      2     1        3        2        3        2\n9      2     2        3        3        3        3\n10     2     1        2        3        2        2\n11     2     1        4        3        2        3\n12     2     2        2        3        2        3\n13     2     1        2        3        2        3\n14     2     1        1        2        1        1\n15     2     1        1        1        1        2\n```\n\n\n:::\n:::\n\n\n\n\n+ Use `across()` to calculate the means for all four variables.\n+ Calculate the means separately by gender (`zpsex`) using `.by =`.\n+ Also add the variance (`var()`), and use `.names=` to name the columns following the pattern `metric.variable`.\n\n[Back to top](#ue06_3)\n\n\n### Exercise {#fnct}\n\nContinue using `pend_small`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npend_small\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n   welle zpsex PEO0400a PEO0400b PEO0400c PEO0400d\n1      2     2        1        1        4        1\n2      2     1        2        1        3        2\n3      2     2        1        3        1        4\n4      2     2        1        1        4        1\n5      2     2        1        1        1        1\n6      2     1        1        1        1        1\n7      2     1        1        2        1        4\n8      2     1        3        2        3        2\n9      2     2        3        3        3        3\n10     2     1        2        3        2        2\n11     2     1        4        3        2        3\n12     2     2        2        3        2        3\n13     2     1        2        3        2        3\n14     2     1        1        2        1        1\n15     2     1        1        1        1        2\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\n+ Standardize the variables `PEO0400a` - `PEO0400d` from `pend_small` using the following pattern:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npend_small %>% \n  mutate(std_PEO0400b = (PEO0400b - mean(PEO0400b,na.rm = T))/sd(PEO0400b,na.rm = T))\n```\n:::\n\n\n\n+ Use a function so that you don't have to repeatedly enter the same steps.\n+ Additionally, use `across()` to apply the function to the desired variables.\n\n[Back to top](#ue06_4)\n\n\n### Exercise {#ifcase}\n\n+ Work on `pend_small2`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npend_small2 <- haven::read_dta(\"./orig/PENDDAT_cf_W13.dta\",\n                         col_select = c(\"palter\",\"PEO0400a\",\"PEO0400b\",\"PEO0400c\",\"statakt\")) \npend_small2 <- pend_small2 %>% slice(5624:5640)\npend_small2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 17 Ã— 5\n   palter    PEO0400a                       PEO0400b          PEO0400c statakt  \n   <dbl+lbl> <dbl+lbl>                      <dbl+lbl>         <dbl+lb> <dbl+lbl>\n 1 77         1 [Completely agree]           3 [Rather not aâ€¦  3 [Ratâ€¦ -10 [Iteâ€¦\n 2 78        -9 [Item not surveyed in wave] -9 [Item not surâ€¦ -9 [Iteâ€¦ -10 [Iteâ€¦\n 3 51         2 [Rather agree]               4 [Do not agreeâ€¦  1 [Comâ€¦  -9 [Iteâ€¦\n 4 23         3 [Rather not agree]           3 [Rather not aâ€¦  2 [Ratâ€¦  -9 [Iteâ€¦\n 5 17         3 [Rather not agree]           2 [Rather agree]  1 [Comâ€¦  -9 [Iteâ€¦\n 6 47         3 [Rather not agree]           2 [Rather agree]  2 [Ratâ€¦  -9 [Iteâ€¦\n 7 24         3 [Rather not agree]           4 [Do not agreeâ€¦  1 [Comâ€¦   1 [In â€¦\n 8 52         2 [Rather agree]               3 [Rather not aâ€¦  1 [Comâ€¦   1 [In â€¦\n 9 19         2 [Rather agree]               3 [Rather not aâ€¦  2 [Ratâ€¦   3 [Pupâ€¦\n10 48         2 [Rather agree]               3 [Rather not aâ€¦  1 [Comâ€¦   1 [In â€¦\n11 49        -9 [Item not surveyed in wave] -9 [Item not surâ€¦ -9 [Iteâ€¦  -5 [Canâ€¦\n12 47         2 [Rather agree]               3 [Rather not aâ€¦  1 [Comâ€¦  -9 [Iteâ€¦\n13 48         2 [Rather agree]               3 [Rather not aâ€¦  1 [Comâ€¦   1 [In â€¦\n14 49        -9 [Item not surveyed in wave] -9 [Item not surâ€¦ -9 [Iteâ€¦   1 [In â€¦\n15 39         4 [Do not agree at all]        3 [Rather not aâ€¦  1 [Comâ€¦  -9 [Iteâ€¦\n16 37         3 [Rather not agree]           4 [Do not agreeâ€¦  1 [Comâ€¦  -9 [Iteâ€¦\n17 38         3 [Rather not agree]           3 [Rather not aâ€¦  1 [Comâ€¦   1 [In â€¦\n```\n\n\n:::\n:::\n\n\n\n\n\n+ Use `ifelse()` to label people 50 years and older as \"Ã¼50\" - for those under 50, label them as \"u50\".\n+ Create a three-way division: people under 40 are labeled \"u40\", people under 50 \"u50\", and people 50 and older as \"Ã¼50\". How would you approach this with `case_when()`?\n+ Use `ifelse()` to overwrite values < 0 in the variables `PEO0400a`, `PEO0400b`, `PEO0400c`, and `statakt` in `pend_small2` with `NA`.\n+ First, write an `ifelse()` function that overwrites all values < 0 in `PEO0400a` with `NA` and otherwise keeps the original value `PEO0400a`.\n+ How would the function look if you applied it to `PEO0400a`, `PEO0400b`, `PEO0400c`, and `statakt` at the same time using `across()`?\n\n[Back to top](#ue06_5)\n\n\n## Appendix\n\n### Helper functions `ifelse()` and `case_when()`\n\n`ifelse()` is a great help for all recoding tasks: we formulate a condition and if it is met, the first value is used; if not, the second value is used. Here we check whether `studs-mean(studs)` is greater than `0` - if so, `above` is used, otherwise `below`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat3 %>% mutate(rel_to_mean = studs-mean(studs),\n                ab_mean_lab = ifelse(rel_to_mean > 0,\"above\",\"below\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  studs profs gegr prom_recht                uni rel_to_mean ab_mean_lab\n1 19173   322 1971       TRUE         Uni Bremen   -2517.625       below\n2  5333    67 1830       TRUE         Uni Vechta  -16357.625       below\n3 15643   210 1973       TRUE      Uni Oldenburg   -6047.625       below\n4 14954   250 1971      FALSE          FH Aachen   -6736.625       below\n5 47269   553 1870       TRUE        RWTH Aachen   25578.375       above\n6 23659   438 1457       TRUE       Uni Freiburg    1968.375       above\n7  9415   150 1818       TRUE           Uni Bonn  -12275.625       below\n8 38079   636 1995      FALSE FH Bonn-Rhein-Sieg   16388.375       above\n```\n\n\n:::\n:::\n\n\n\n\n`case_when()` (`{dplyr}`) extends this principle, allowing us to specify more than two options.  \nThe syntax is slightly different: first, we specify the condition, then after a `~` the values to be used: \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat3 %>% mutate(age = case_when(gegr < 1500 ~ \"very old\",\n                                gegr < 1900 ~ \"old\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  studs profs gegr prom_recht                uni      age\n1 19173   322 1971       TRUE         Uni Bremen     <NA>\n2  5333    67 1830       TRUE         Uni Vechta      old\n3 15643   210 1973       TRUE      Uni Oldenburg     <NA>\n4 14954   250 1971      FALSE          FH Aachen     <NA>\n5 47269   553 1870       TRUE        RWTH Aachen      old\n6 23659   438 1457       TRUE       Uni Freiburg very old\n7  9415   150 1818       TRUE           Uni Bonn      old\n8 38079   636 1995      FALSE FH Bonn-Rhein-Sieg     <NA>\n```\n\n\n:::\n:::\n\n\n\n\nWith `TRUE`, we can address all cases that have not met any conditions so far:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat3 %>% mutate(age = case_when(gegr < 1500 ~ \"very old\",\n                                gegr < 1900 ~ \"old\",\n                                TRUE ~ \"relatively new\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  studs profs gegr prom_recht                uni            age\n1 19173   322 1971       TRUE         Uni Bremen relatively new\n2  5333    67 1830       TRUE         Uni Vechta            old\n3 15643   210 1973       TRUE      Uni Oldenburg relatively new\n4 14954   250 1971      FALSE          FH Aachen relatively new\n5 47269   553 1870       TRUE        RWTH Aachen            old\n6 23659   438 1457       TRUE       Uni Freiburg       very old\n7  9415   150 1818       TRUE           Uni Bonn            old\n8 38079   636 1995      FALSE FH Bonn-Rhein-Sieg relatively new\n```\n\n\n:::\n:::\n\n\n\n\nThis doesn't have to be limited to one variable:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat3 %>% mutate(age = case_when(gegr < 1500 & prom_recht  == T ~ \"very old university\",\n                                gegr < 1900 & prom_recht  == T ~ \"old university\",\n                                gegr > 1900 & prom_recht  == T ~ \"young university\",\n                                gegr < 1900 & prom_recht  == F ~ \"old college\",\n                                gegr > 1900 & prom_recht  == F ~ \"young college\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  studs profs gegr prom_recht                uni                 age\n1 19173   322 1971       TRUE         Uni Bremen    young university\n2  5333    67 1830       TRUE         Uni Vechta      old university\n3 15643   210 1973       TRUE      Uni Oldenburg    young university\n4 14954   250 1971      FALSE          FH Aachen       young college\n5 47269   553 1870       TRUE        RWTH Aachen      old university\n6 23659   438 1457       TRUE       Uni Freiburg very old university\n7  9415   150 1818       TRUE           Uni Bonn      old university\n8 38079   636 1995      FALSE FH Bonn-Rhein-Sieg       young college\n```\n\n\n:::\n:::\n\n\n\n\n### [Exercise](#ifcase) {#ue06_5}\n\n\n### Renaming variables\n\n\nTo rename variables, use `rename(new_name = old_name)`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsat_small %>% rename(newname = PEO0300a)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 Ã— 3\n  newname PEO0300b PEO0300c\n    <dbl>    <dbl>    <dbl>\n1       2        3        2\n2       1        1        3\n3       1        1        3\n4       2        1        1\n5       1        1        2\n```\n\n\n:::\n:::\n\n\n\n\nFor advanced transformations, it's worth looking into `rename_with()`. This allows us to use [Regular Expressions](https://raw.githubusercontent.com/rstudio/cheatsheets/main/regex.pdf), for example from [{stringr}](https://raw.githubusercontent.com/rstudio/cheatsheets/main/strings.pdf). Hereâ€™s just an example:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsat_small %>% rename_with(~tolower(.))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 Ã— 3\n  peo0300a peo0300b peo0300c\n     <dbl>    <dbl>    <dbl>\n1        2        3        2\n2        1        1        3\n3        1        1        3\n4        2        1        1\n5        1        1        2\n```\n\n\n:::\n\n```{.r .cell-code}\nsat_small %>% rename_with(~str_remove(.x,\"PEO0300\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 Ã— 3\n      a     b     c\n  <dbl> <dbl> <dbl>\n1     2     3     2\n2     1     1     3\n3     1     1     3\n4     2     1     1\n5     1     1     2\n```\n\n\n:::\n\n```{.r .cell-code}\nsat_small %>% rename_with(~str_replace(.x,\"PEO0300\",\"Occupation_\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 Ã— 3\n  Occupation_a Occupation_b Occupation_c\n         <dbl>        <dbl>        <dbl>\n1            2            3            2\n2            1            1            3\n3            1            1            3\n4            2            1            1\n5            1            1            2\n```\n\n\n:::\n:::\n\n\n\n### Creating Classes with `cut()`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat3\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  studs profs gegr prom_recht                uni\n1 19173   322 1971       TRUE         Uni Bremen\n2  5333    67 1830       TRUE         Uni Vechta\n3 15643   210 1973       TRUE      Uni Oldenburg\n4 14954   250 1971      FALSE          FH Aachen\n5 47269   553 1870       TRUE        RWTH Aachen\n6 23659   438 1457       TRUE       Uni Freiburg\n7  9415   150 1818       TRUE           Uni Bonn\n8 38079   636 1995      FALSE FH Bonn-Rhein-Sieg\n```\n\n\n:::\n:::\n\n\n\n\nA common task in data preparation is classifying a continuous variable, such as the number of professors. We want to group `profs` in steps of 150. To create these classes, we use `cut()` and specify the class boundaries with `breaks`. We can use `seq()` to generate the breakpoints. In `seq()`, we specify the lower and upper limits along with the step size.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncut(dat3$profs,breaks = c(50, 200, 350, 500, 650))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] (200,350] (50,200]  (200,350] (200,350] (500,650] (350,500] (50,200] \n[8] (500,650]\nLevels: (50,200] (200,350] (350,500] (500,650]\n```\n\n\n:::\n\n```{.r .cell-code}\ncut(dat3$profs,breaks = seq(50,650,150))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] (200,350] (50,200]  (200,350] (200,350] (500,650] (350,500] (50,200] \n[8] (500,650]\nLevels: (50,200] (200,350] (350,500] (500,650]\n```\n\n\n:::\n:::\n\n\n\n\nWe store these values in a new variable in the `dat3` dataset:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat3$prof_class <- cut(dat3$profs,breaks = seq(50,650,150))\ndat3\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  studs profs gegr prom_recht                uni prof_class\n1 19173   322 1971       TRUE         Uni Bremen  (200,350]\n2  5333    67 1830       TRUE         Uni Vechta   (50,200]\n3 15643   210 1973       TRUE      Uni Oldenburg  (200,350]\n4 14954   250 1971      FALSE          FH Aachen  (200,350]\n5 47269   553 1870       TRUE        RWTH Aachen  (500,650]\n6 23659   438 1457       TRUE       Uni Freiburg  (350,500]\n7  9415   150 1818       TRUE           Uni Bonn   (50,200]\n8 38079   636 1995      FALSE FH Bonn-Rhein-Sieg  (500,650]\n```\n\n\n:::\n:::\n\n\n\n\nFor this new variable, we can request a frequency table using `count()`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat3 %>% count(prof_class)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  prof_class n\n1   (50,200] 2\n2  (200,350] 3\n3  (350,500] 1\n4  (500,650] 2\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n\n\nThe parentheses `(` indicate exclusion, while the brackets `]` indicate inclusion. There are 3 universities in the dataset that have more than 200 and up to 350 professors.\n\nFor the following examples, we delete the `prof_class` variable again:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat3$prof_class <- NULL\n```\n:::\n\n\n\n\n**Some useful options for `cut()` in the appendix**\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbsp <- c(1990,1998,2001,2009)\nbsp\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1990 1998 2001 2009\n```\n\n\n:::\n\n```{.r .cell-code}\ncut(bsp,breaks = c(1990,2000,2010)) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] <NA>             (1.99e+03,2e+03] (2e+03,2.01e+03] (2e+03,2.01e+03]\nLevels: (1.99e+03,2e+03] (2e+03,2.01e+03]\n```\n\n\n:::\n\n```{.r .cell-code}\n# Specify the number of digits in the labels\ncut(bsp,breaks = c(1990,2000,2010),dig.lab = 4) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] <NA>        (1990,2000] (2000,2010] (2000,2010]\nLevels: (1990,2000] (2000,2010]\n```\n\n\n:::\n\n```{.r .cell-code}\n# Include the lower boundary\ncut(bsp,breaks = c(1990,2000,2010),dig.lab = 4,include.lowest = T) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] [1990,2000] [1990,2000] (2000,2010] (2000,2010]\nLevels: [1990,2000] (2000,2010]\n```\n\n\n:::\n\n```{.r .cell-code}\n# Number the categories instead of labels:\ncut(bsp,breaks = c(1990,2000,2010),labels = FALSE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] NA  1  2  2\n```\n\n\n:::\n\n```{.r .cell-code}\n# Specify your own labels:\ncut(bsp,breaks = c(1990,2000,2010),labels = c(\"90s\",\"00s\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] <NA> 90s  00s  00s \nLevels: 90s 00s\n```\n\n\n:::\n:::\n\n\n\n\n### String Functions for *regex*\n\n[{stringr}](https://stringr.tidyverse.org/) provides a series of very useful string functions with [regular expressions](https://raw.githubusercontent.com/rstudio/cheatsheets/main/regex.pdf). You can get an overview from this [cheatsheet](https://raw.githubusercontent.com/rstudio/cheatsheets/main/strings.pdf).\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndat3 %>% mutate(uni_fh = str_detect(uni,\"Uni\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  studs profs gegr prom_recht                uni uni_fh\n1 19173   322 1971       TRUE         Uni Bremen   TRUE\n2  5333    67 1830       TRUE         Uni Vechta   TRUE\n3 15643   210 1973       TRUE      Uni Oldenburg   TRUE\n4 14954   250 1971      FALSE          FH Aachen  FALSE\n5 47269   553 1870       TRUE        RWTH Aachen  FALSE\n6 23659   438 1457       TRUE       Uni Freiburg   TRUE\n7  9415   150 1818       TRUE           Uni Bonn   TRUE\n8 38079   636 1995      FALSE FH Bonn-Rhein-Sieg  FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\ndat3 %>% mutate(bula = case_when(str_detect(uni,\"Bremen\")~ \"HB\",\n                                 str_detect(uni,\"Oldenb|Vechta\")~ \"NDS\",\n                                 str_detect(uni,\"Bonn|Aachen\")~ \"NRW\",\n                                 str_detect(uni,\"Freiburg\")~ \"BW\"\n                                 ))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  studs profs gegr prom_recht                uni bula\n1 19173   322 1971       TRUE         Uni Bremen   HB\n2  5333    67 1830       TRUE         Uni Vechta  NDS\n3 15643   210 1973       TRUE      Uni Oldenburg  NDS\n4 14954   250 1971      FALSE          FH Aachen  NRW\n5 47269   553 1870       TRUE        RWTH Aachen  NRW\n6 23659   438 1457       TRUE       Uni Freiburg   BW\n7  9415   150 1818       TRUE           Uni Bonn  NRW\n8 38079   636 1995      FALSE FH Bonn-Rhein-Sieg  NRW\n```\n\n\n:::\n\n```{.r .cell-code}\ndat3 %>% mutate(ort = str_remove(uni,\"Uni |FH |RWTH \"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  studs profs gegr prom_recht                uni             ort\n1 19173   322 1971       TRUE         Uni Bremen          Bremen\n2  5333    67 1830       TRUE         Uni Vechta          Vechta\n3 15643   210 1973       TRUE      Uni Oldenburg       Oldenburg\n4 14954   250 1971      FALSE          FH Aachen          Aachen\n5 47269   553 1870       TRUE        RWTH Aachen          Aachen\n6 23659   438 1457       TRUE       Uni Freiburg        Freiburg\n7  9415   150 1818       TRUE           Uni Bonn            Bonn\n8 38079   636 1995      FALSE FH Bonn-Rhein-Sieg Bonn-Rhein-Sieg\n```\n\n\n:::\n:::",
    "supporting": [
      "04_data_wrangle_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}