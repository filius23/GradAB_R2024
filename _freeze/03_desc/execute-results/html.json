{
  "hash": "56975a59c1930eb94bd249a990317ac1",
  "result": {
    "engine": "knitr",
    "markdown": "# Getting an Overview {#tab}\n\n\n\n\n\n\n\n\n\nAfter importing datasets, we want to get an overview. Every statistical analysis starts with a description of the variables. In this session, we will see how to use tables to get an overview of the information in a dataset. We will also work with the PASS Campus File in this session. Let's start by loading the data:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfdz_install(\"haven\") # if not already installed \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(haven) # data import for Stata datasets\nlibrary(tidyverse) # tidyverse\npend <- read_dta(\"./orig/PENDDAT_cf_W13.dta\")\n```\n:::\n\n\n\n\n## Frequency Counts\n\nWe have various commands available to create a frequency count:\n\n+ `table()`\n+ `count()` from `{dplyr}`\n\n\nThe simplest command for counting frequencies is the `table()` command. For example, with the variable `statakt` representing the education status of respondents:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(pend$statakt)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n -10   -9   -5    1    2    3 \n3765 3289  280 9470 6139 5481 \n```\n\n\n:::\n:::\n\n\n\nHere, we see the absolute frequencies displayed. The first row lists the different values, and the second row shows the frequencies.\n\nHowever, the labels are ignored in the output of `table()`. A look into the PASS data report or using `attributes()` reveals the value labels:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nattributes(pend$statakt)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$label\n[1] \"Aktueller Hauptstatus, generiert (ab Welle 2)\"\n\n$format.stata\n[1] \"%46.0g\"\n\n$class\n[1] \"haven_labelled\" \"vctrs_vctr\"     \"double\"        \n\n$labels\nItem fuer Fragebogenversion nicht relevant \n                                       -10 \n               Item in Welle nicht erhoben \n                                        -9 \n   Generierung nicht mgl. (fehlende Werte) \n                                        -5 \n                             Erwerbstaetig \n                                         1 \n        Arbeitslos (Gemeldet und sonstige) \n                                         2 \n                                   Inaktiv \n                                         3 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nt1 <- table(pend$statakt)\n```\n:::\n\n\n\n\n9470 respondents are employed, 5481 respondents are inactive, etc. (More on labels and working with value labels in R later.)\n\nWith `count()` from `{dplyr}`, we get the labels displayed directly. Again, we use the [pipe `%>%`](#pipe):\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npend %>% count(statakt)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 2\n  statakt                                              n\n  <dbl+lbl>                                        <int>\n1 -10 [Item fuer Fragebogenversion nicht relevant]  3765\n2  -9 [Item in Welle nicht erhoben]                 3289\n3  -5 [Generierung nicht mgl. (fehlende Werte)]      280\n4   1 [Erwerbstaetig]                               9470\n5   2 [Arbeitslos (Gemeldet und sonstige)]          6139\n6   3 [Inaktiv]                                     5481\n```\n\n\n:::\n:::\n\n\n\n\nWe can also store tables under a freely chosen name and call them up later:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nt1 <- table(pend$statakt)\nt2 <- pend %>% count(statakt)\n```\n:::\n\n\n\n\nWe see here that the table with `table()` creates a new object form, a table. With `count()`, however, a `data.frame` is created.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(t1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"table\"\n```\n\n\n:::\n\n```{.r .cell-code}\nclass(t2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n```\n\n\n:::\n:::\n\n\n\n\n## Missing Values in R: `NA` {#NA03}\n\nNegative values are a bit annoying.\n\nTo mark the values like `-5` as missing data in R, we need to set them to `NA` in `pend`. \nTo do this, we call `pend$statakt` and filter with `[]` only the values for `statakt` equal to `-1`. In the previous chapter, we learned how to call specific values this way:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npend$statakt[pend$statakt == -5] # only call statakt = -5\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<labelled<double>[280]>: Aktueller Hauptstatus, generiert (ab Welle 2)\n  [1] -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5\n [26] -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5\n [51] -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5\n [76] -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5\n[101] -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5\n[126] -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5\n[151] -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5\n[176] -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5\n[201] -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5\n[226] -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5\n[251] -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5 -5\n[276] -5 -5 -5 -5 -5\n\nLabels:\n value                                      label\n   -10 Item fuer Fragebogenversion nicht relevant\n    -9                Item in Welle nicht erhoben\n    -5    Generierung nicht mgl. (fehlende Werte)\n     1                              Erwerbstaetig\n     2         Arbeitslos (Gemeldet und sonstige)\n     3                                    Inaktiv\n```\n\n\n:::\n:::\n\n\n\n(Here, we get the labels again, which is somewhat suboptimal for clarity.)\n\nIf we then assign a new value with `<-`, the called values will be overwritten - here, we overwrite all values for `statakt == -1` with `NA`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npend$statakt[pend$statakt == -5]  <- NA\n```\n:::\n\n\n\n\n`NA` is the code for missing data in R, and they will not be listed in `table()`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(pend$statakt)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n -10   -9    1    2    3 \n3765 3289 9470 6139 5481 \n```\n\n\n:::\n:::\n\n\n\nBut we can explicitly request the count of `NA` with the option `exclude = NULL`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(pend$statakt,exclude = NULL)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n -10   -9    1    2    3 <NA> \n3765 3289 9470 6139 5481  280 \n```\n\n\n:::\n:::\n\n\n\n\nHowever, we have not yet overwritten all the negative values; `-10` and `-9` are still missing.\nOf course, it would be possible this way, but it's a bit cumbersome:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npend$statakt[pend$statakt == -9 ]  <- NA\npend$statakt[pend$statakt == -10]  <- NA\n```\n:::\n\n\n\n\nFor the PASS data, it's shorter to use `< 0`, because all missing codes are less than 0:[^match_op03]\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npend$statakt[pend$statakt < 0 ]  <- NA\n```\n:::\n\n\n\n\n[^match_op03]: For non-systematic values, we can use the `%in%` operator that we already learned about in connection with [`filter()`](#filter): `pend$var1[pend$var1 %in% c(-9,2,124) ]  <- NA` (this is just an example).\n\nNow we are done with `statakt`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(pend$statakt)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n   1    2    3 \n9470 6139 5481 \n```\n\n\n:::\n\n```{.r .cell-code}\ntable(pend$statakt,exclude = NULL)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n   1    2    3 <NA> \n9470 6139 5481 7334 \n```\n\n\n:::\n:::\n\n\n\n\n\nIn `count()`, `NA` is also counted:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npend %>% count(statakt)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 2\n  statakt                                     n\n  <dbl+lbl>                               <int>\n1  1 [Erwerbstaetig]                       9470\n2  2 [Arbeitslos (Gemeldet und sonstige)]  6139\n3  3 [Inaktiv]                             5481\n4 NA                                       7334\n```\n\n\n:::\n:::\n\n\n\nIf we want to avoid this, we use `filter()` again - with `is.na()`, we can identify `NA`. By prefixing with `!`, we can request that all non-`NA` values be retained with `TRUE`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npend %>% filter(!is.na(statakt)) %>% count(statakt)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  statakt                                    n\n  <dbl+lbl>                              <int>\n1 1 [Erwerbstaetig]                       9470\n2 2 [Arbeitslos (Gemeldet und sonstige)]  6139\n3 3 [Inaktiv]                             5481\n```\n\n\n:::\n:::\n\n\n\n\nMore about missing values can be found, for example, in [**The missing book**](https://tmb.njtierney.com/) by Nicholas Tierney & Allison Horst.\n\n### [Exercise](#descue1) {#ue3_1}\n\n## Other Table Values\n\nWith the help of additional functions, we can customize the frequency tables:\n\n+ `prop.table()`: relative values/percentages\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(pend$statakt) %>% prop.table(.) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n        1         2         3 \n0.4490280 0.2910858 0.2598862 \n```\n\n\n:::\n:::\n\n\n\n29.109% of respondents are unemployed.\n\n+ `cumsum()`: cumulative values\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(pend$statakt) %>% cumsum(.)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    1     2     3 \n 9470 15609 21090 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n\n\n15609 respondents are employed or unemployed.\n\n+ `prop.table()` with `cumsum()`: cumulative relative frequencies\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(pend$statakt) %>% prop.table() %>% cumsum()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n        1         2         3 \n0.4490280 0.7401138 1.0000000 \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n\n\n\n74.011% of respondents are employed or unemployed (and not inactive).\n\n::: {.callout-tip collapse=\"true\"}\n\n## Multiple Metrics in One Table\n\nMany are probably familiar with the following view from Stata with `tab statakt`:\n\n\n\n::: {.cell collectcode='false'}\n::: {.cell-output .cell-output-stdout}\n\n```\n   Aktueller Hauptstatus, generiert (ab |\n                               Welle 2) |      Freq.     Percent        Cum.\n----------------------------------------+-----------------------------------\n                          Erwerbstaetig |      9,470       33.32       33.32\n     Arbeitslos (Gemeldet und sonstige) |      6,139       21.60       54.91\n                                Inaktiv |      5,481       19.28       74.20\n                                      . |      7,334       25.80      100.00\n----------------------------------------+-----------------------------------\n                                  Total |     28,424      100.00\n```\n\n\n:::\n:::\n\n\n\nBy default, `table()` or `count()` only provide one type of metric.\nHowever, since we get the counts as a `data.frame()` with `count()`, we can simply add the relative and cumulative frequencies as new variables.\n\nWe use `dat1$var <- ....`, which we learned in the previous chapter.\nTo add a new column `pct` to our `data.frame` with the counts, we proceed as follows:\n+ First, we create a `data.frame` with the count using `count()`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntab_statakt <- pend %>% count(statakt) # base command\ntab_statakt\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 2\n  statakt                                     n\n  <dbl+lbl>                               <int>\n1  1 [Erwerbstaetig]                       9470\n2  2 [Arbeitslos (Gemeldet und sonstige)]  6139\n3  3 [Inaktiv]                             5481\n4 NA                                       7334\n```\n\n\n:::\n:::\n\n\n\n\n\n+ Then we add a new column for the relative frequencies, calculated with `prop.table()`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntab_statakt$pct <- prop.table(tab_statakt$n)\n```\n:::\n\n\n\n\nIf we now want to create cumulative frequencies, we can apply `cumsum()` to `pct`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntab_statakt$Cum <- cumsum(tab_statakt$pct)\ntab_statakt\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 4\n  statakt                                     n   pct   Cum\n  <dbl+lbl>                               <int> <dbl> <dbl>\n1  1 [Erwerbstaetig]                       9470 0.333 0.333\n2  2 [Arbeitslos (Gemeldet und sonstige)]  6139 0.216 0.549\n3  3 [Inaktiv]                             5481 0.193 0.742\n4 NA                                       7334 0.258 1    \n```\n\n\n:::\n:::\n\n\n\n\nThe `NA` is still somewhat annoying as it represents missing data and should not be included.\nWe can exclude it simply with `!is.na()` in `filter()`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntab_statakt2 <- pend %>% filter(!is.na(statakt)) %>% count(statakt) \ntab_statakt2$pct <- prop.table(tab_statakt2$n)\ntab_statakt2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 3\n  statakt                                    n   pct\n  <dbl+lbl>                              <int> <dbl>\n1 1 [Erwerbstaetig]                       9470 0.449\n2 2 [Arbeitslos (Gemeldet und sonstige)]  6139 0.291\n3 3 [Inaktiv]                             5481 0.260\n```\n\n\n:::\n\n```{.r .cell-code}\ntab_statakt2$cum <- cumsum(tab_statakt2$pct)\ntab_statakt2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 4\n  statakt                                    n   pct   cum\n  <dbl+lbl>                              <int> <dbl> <dbl>\n1 1 [Erwerbstaetig]                       9470 0.449 0.449\n2 2 [Arbeitslos (Gemeldet und sonstige)]  6139 0.291 0.740\n3 3 [Inaktiv]                             5481 0.260 1    \n```\n\n\n:::\n:::\n\n\n\n\n:::\n\n\n\n### Creating a Contingency Table\n\nContingency tables allow us to explore how frequently combinations of different variables occur together. \nLet's look at two ways to create contingency tables in R.\n\nUsing the `table()` function, we create a contingency table by inserting two variables. \nFor instance, if we want to see the frequencies of employment status (`statakt`) by gender (`zpsex`), we can use the following command:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(pend$zpsex, pend$statakt)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   \n       1    2    3\n  1 4685 3240 2047\n  2 4785 2899 3434\n```\n\n\n:::\n:::\n\n\n\n\nThis table shows the counts of respondents by gender and employment status. For example, if `zpsex=2` represents females and `statakt=3` represents inactivity, the table displays how many female respondents are inactive.\n\nTo add row and column totals, use the `addmargins()` function:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(pend$zpsex, pend$statakt) %>% addmargins()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     \n          1     2     3   Sum\n  1    4685  3240  2047  9972\n  2    4785  2899  3434 11118\n  Sum  9470  6139  5481 21090\n```\n\n\n:::\n:::\n\n\n\n\nIf you want to compute the relative frequencies instead of absolute counts, use the `prop.table()` function:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(pend$zpsex, pend$statakt) %>% prop.table()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   \n             1          2          3\n  1 0.22214320 0.15362731 0.09706022\n  2 0.22688478 0.13745851 0.16282598\n```\n\n\n:::\n:::\n\n\n\n\nFor row-wise percentages (within each gender, how many fall into each employment status), use:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(pend$zpsex, pend$statakt) %>% prop.table(margin = 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   \n            1         2         3\n  1 0.4698155 0.3249097 0.2052748\n  2 0.4303832 0.2607483 0.3088685\n```\n\n\n:::\n:::\n\n\n\n\nFor column-wise percentages (within each employment status, how many are male or female), use:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(pend$zpsex, pend$statakt) %>% prop.table(margin = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   \n            1         2         3\n  1 0.4947202 0.5277733 0.3734720\n  2 0.5052798 0.4722267 0.6265280\n```\n\n\n:::\n:::\n\n\n\n\n### Working with `count()` from `{dplyr}`\n\nAnother approach to generate frequency tables is using `count()` from the `{dplyr}` package. It provides a more readable output with labeled variables:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npend %>% count(zpsex, statakt)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8 × 3\n  zpsex         statakt                                     n\n  <dbl+lbl>     <dbl+lbl>                               <int>\n1 1 [Maennlich]  1 [Erwerbstaetig]                       4685\n2 1 [Maennlich]  2 [Arbeitslos (Gemeldet und sonstige)]  3240\n3 1 [Maennlich]  3 [Inaktiv]                             2047\n4 1 [Maennlich] NA                                       3555\n5 2 [Weiblich]   1 [Erwerbstaetig]                       4785\n6 2 [Weiblich]   2 [Arbeitslos (Gemeldet und sonstige)]  2899\n7 2 [Weiblich]   3 [Inaktiv]                             3434\n8 2 [Weiblich]  NA                                       3779\n```\n\n\n:::\n:::\n\n\n\n\n## Summary Statistics\n\nFor numerical variables, such as income (`netges`), we often compute summary statistics like the mean, median, or quantiles. To get a quick overview, use `summary()`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(pend$netges)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n    -5.0     -3.0     -3.0    567.9    990.0 111419.0 \n```\n\n\n:::\n:::\n\n\n\n\n### Handling Missing Data\n\nNegative values in the data (like -5 for `netges`) typically represent missing data. We can convert these to `NA`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npend$netges[pend$netges < 0] <- NA\n```\n:::\n\n\n\n\n### Calculating Specific Statistics\n\nTo calculate specific statistics, we can use:\n\n- Minimum: `min()`\n- Maximum: `max()`\n- Mean: `mean()`\n- Median: `median()`\n- Quantiles: `quantile()`\n- Variance: `var()`\n- Standard Deviation: `sd()`\n\nFor instance, the mean of income ignoring missing values:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(pend$netges, na.rm = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1562.3\n```\n\n\n:::\n:::\n\n\n\n\n### Custom Summary with `summarise()`\n\nYou can use `summarise()` from `{dplyr}` to create custom summary tables:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npend %>% summarise(\n  Minimum = min(netges, na.rm = TRUE),\n  Median = median(netges, na.rm = TRUE),\n  Mean = mean(netges, na.rm = TRUE),\n  Maximum = max(netges, na.rm = TRUE)\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 4\n  Minimum   Median  Mean Maximum  \n  <dbl+lbl>  <dbl> <dbl> <dbl+lbl>\n1 0           1320 1562. 111419   \n```\n\n\n:::\n:::\n\n\n\n\n### Comparing Across Groups\n\nTo compare statistics across groups, use `.by` in `summarise()`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npend %>% summarise(\n  Minimum = min(netges, na.rm = TRUE),\n  Median = median(netges, na.rm = TRUE),\n  Mean = mean(netges, na.rm = TRUE),\n  Maximum = max(netges, na.rm = TRUE),\n  .by = welle\n) %>% arrange(welle)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 13 × 5\n   welle                    Minimum   Median  Mean Maximum  \n   <dbl+lbl>                <dbl+lbl>  <dbl> <dbl> <dbl+lbl>\n 1  1 [Welle 1 (2006/2007)] 1          1200  1525. 111419   \n 2  2 [Welle 2 (2007/2008)] 0          1320  1529.   7200   \n 3  3 [Welle 3 (2008/2009)] 0          1298. 1498.  12000   \n 4  4 [Welle 4 (2010)]      0          1210  1447.  10800   \n 5  5 [Welle 5 (2011)]      0          1250  1494.  33363   \n 6  6 [Welle 6 (2012)]      0          1215  1459.  15950   \n 7  7 [Welle 7 (2013)]      0          1250  1539.  87835   \n 8  8 [Welle 8 (2014)]      0          1255  1456.   9000   \n 9  9 [Welle 9 (2015)]      0          1280  1613. 110451   \n10 10 [Welle 10 (2016)]     0          1375  1541.   6300   \n11 11 [Welle 11 (2017)]     0          1500  1748.  44440   \n12 12 [Welle 12 (2018)]     0          1500  1667.   7150   \n13 13 [Welle 13 (2019)]     0          1550  1816.  88453   \n```\n\n\n:::\n:::\n\n\n\n\nYou can also filter for specific waves if needed:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npend %>% \n  filter(welle %in% c(1, 10)) %>% \n  summarise(\n    Minimum = min(netges, na.rm = TRUE),\n    Median = median(netges, na.rm = TRUE),\n    Mean = mean(netges, na.rm = TRUE),\n    Maximum = max(netges, na.rm = TRUE),\n    .by = welle\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 5\n  welle                    Minimum   Median  Mean Maximum  \n  <dbl+lbl>                <dbl+lbl>  <dbl> <dbl> <dbl+lbl>\n1  1 [Welle 1 (2006/2007)] 1           1200 1525. 111419   \n2 10 [Welle 10 (2016)]     0           1375 1541.   6300   \n```\n\n\n:::\n:::\n\n\n\n\nThese methods allow for thorough analysis of both categorical and numerical data in R.\n\n### [Exercise](#descue3) {#ue3_3}\n\n\n## Übungen\n\n<!-- {{< include _03_0_ueb.qmd >}} -->\nAlle Übungen beziehen sich auf das PASS CampusFile `PENDDAT_cf_W13.dta`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(haven)\npend <- read_dta(\"./orig/PENDDAT_cf_W13.dta\")\n```\n:::\n\n\n\n\n**[Zur Erinnerung: hier geht's zur Übersicht der Einlesebefehle](02_intro.qmd#import)**\n\n\n### Übung 1 {#descue1}\n\nWir interessieren uns für die Variable `famstand`, welche den Familienstand der Befragten enthält:\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div id=\"ygbybakaea\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>#ygbybakaea table {\n  font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n#ygbybakaea thead, #ygbybakaea tbody, #ygbybakaea tfoot, #ygbybakaea tr, #ygbybakaea td, #ygbybakaea th {\n  border-style: none;\n}\n\n#ygbybakaea p {\n  margin: 0;\n  padding: 0;\n}\n\n#ygbybakaea .gt_table {\n  display: table;\n  border-collapse: collapse;\n  line-height: normal;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 9px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#ygbybakaea .gt_caption {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n#ygbybakaea .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#ygbybakaea .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 3px;\n  padding-bottom: 5px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#ygbybakaea .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#ygbybakaea .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#ygbybakaea .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#ygbybakaea .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#ygbybakaea .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#ygbybakaea .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#ygbybakaea .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#ygbybakaea .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#ygbybakaea .gt_spanner_row {\n  border-bottom-style: hidden;\n}\n\n#ygbybakaea .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  text-align: left;\n}\n\n#ygbybakaea .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#ygbybakaea .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#ygbybakaea .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#ygbybakaea .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#ygbybakaea .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#ygbybakaea .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#ygbybakaea .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#ygbybakaea .gt_row_group_first th {\n  border-top-width: 2px;\n}\n\n#ygbybakaea .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#ygbybakaea .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #D3D3D3;\n}\n\n#ygbybakaea .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#ygbybakaea .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#ygbybakaea .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#ygbybakaea .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#ygbybakaea .gt_last_grand_summary_row_top {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: double;\n  border-bottom-width: 6px;\n  border-bottom-color: #D3D3D3;\n}\n\n#ygbybakaea .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#ygbybakaea .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#ygbybakaea .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#ygbybakaea .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#ygbybakaea .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#ygbybakaea .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#ygbybakaea .gt_left {\n  text-align: left;\n}\n\n#ygbybakaea .gt_center {\n  text-align: center;\n}\n\n#ygbybakaea .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#ygbybakaea .gt_font_normal {\n  font-weight: normal;\n}\n\n#ygbybakaea .gt_font_bold {\n  font-weight: bold;\n}\n\n#ygbybakaea .gt_font_italic {\n  font-style: italic;\n}\n\n#ygbybakaea .gt_super {\n  font-size: 65%;\n}\n\n#ygbybakaea .gt_footnote_marks {\n  font-size: 75%;\n  vertical-align: 0.4em;\n  position: initial;\n}\n\n#ygbybakaea .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#ygbybakaea .gt_indent_1 {\n  text-indent: 5px;\n}\n\n#ygbybakaea .gt_indent_2 {\n  text-indent: 10px;\n}\n\n#ygbybakaea .gt_indent_3 {\n  text-indent: 15px;\n}\n\n#ygbybakaea .gt_indent_4 {\n  text-indent: 20px;\n}\n\n#ygbybakaea .gt_indent_5 {\n  text-indent: 25px;\n}\n\n#ygbybakaea .katex-display {\n  display: inline-flex !important;\n  margin-bottom: 0.75em !important;\n}\n\n#ygbybakaea div.Reactable > div.rt-table > div.rt-thead > div.rt-tr.rt-tr-group-header > div.rt-th-group:after {\n  height: 0px !important;\n}\n</style>\n<table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\">\n  <thead>\n    <tr class=\"gt_col_headings\">\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_center\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Familienstand, generiert\">Familienstand, generiert</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_center\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Familienstand, generiert\">Familienstand, generiert</th>\n    </tr>\n  </thead>\n  <tbody class=\"gt_table_body\">\n    <tr><td headers=\"famstand\" class=\"gt_row gt_center\">-8</td>\n<td headers=\"label\" class=\"gt_row gt_center\">Unplausibler Wert</td></tr>\n    <tr><td headers=\"famstand\" class=\"gt_row gt_center\">-4</td>\n<td headers=\"label\" class=\"gt_row gt_center\">Frage irrtuemlich nicht gestellt</td></tr>\n    <tr><td headers=\"famstand\" class=\"gt_row gt_center\">-3</td>\n<td headers=\"label\" class=\"gt_row gt_center\">Trifft nicht zu (Filter)</td></tr>\n    <tr><td headers=\"famstand\" class=\"gt_row gt_center\">-2</td>\n<td headers=\"label\" class=\"gt_row gt_center\">Keine Antwort</td></tr>\n    <tr><td headers=\"famstand\" class=\"gt_row gt_center\"> 1</td>\n<td headers=\"label\" class=\"gt_row gt_center\">Ledig</td></tr>\n    <tr><td headers=\"famstand\" class=\"gt_row gt_center\"> 2</td>\n<td headers=\"label\" class=\"gt_row gt_center\">Verheiratet/eing. Lebensp., zus. lebd.</td></tr>\n    <tr><td headers=\"famstand\" class=\"gt_row gt_center\"> 3</td>\n<td headers=\"label\" class=\"gt_row gt_center\">Verheiratet/eing. Lebensp., getr. lebd.</td></tr>\n    <tr><td headers=\"famstand\" class=\"gt_row gt_center\"> 4</td>\n<td headers=\"label\" class=\"gt_row gt_center\">Geschieden</td></tr>\n    <tr><td headers=\"famstand\" class=\"gt_row gt_center\"> 5</td>\n<td headers=\"label\" class=\"gt_row gt_center\">Verwitwet</td></tr>\n  </tbody>\n  \n  \n</table>\n</div>\n```\n\n:::\n:::\n\n\n\n\n\n+ Lassen Sie sich eine Tabelle mit den absoluten Häufigkeiten anzeigen, nutzen Sie dafür sowohl `table()` als auch `count()` (Denken Sie daran, `{tidyverse}` zu laden für `count()`). \n+ Überschreiben Sie Missing-Codes mit `NA`.\n+ Hat das Überschreiben der Missings mit NA geklappt? Erstellen Sie die Tabelle erneut.\n+ Lassen Sie sich der relativen Häufigkeiten (Anteile) ausgeben. Verwenden Sie `prop.table()` auf Basis des `table()`.\n+ Erstellen Sie eine Kontingenztabelle, indem Sie neben `famstand` auch das Geschlecht `zpsex` (2 = Frauen, 1 = Männer) mit einbeziehen\n\n[Zurück nach oben](#ue3_1)\n\n### Übung 2 {#descue2}\n\n<!-- + Erstellen Sie mit Hilfe von `count()` eine Tabelle mit absoluten, relativen und kumulierten relativen Häufigkeiten für `famstand`. Erstellen Sie zunächst eine Auszählung mit `count()` und fügen Sie dann die relativen und kumulierten relativen Häufigkeiten hinzu. -->\n+ Erstellen Sie eine Kontingenztabelle für `famstand` und `zpsex`\n+ Wie viel Prozent der Befragten sind geschiedene Frauen? \n+ Wie viel Prozent der befragten Frauen sind geschieden? Nutzen Sie die `margin =`-Option\n+ Wie viel Prozent der befragten Geschiedenen sind Frauen? Nutzen Sie die `margin =`-Option\n  \n[Zurück nach oben](#ue3_2)\n\n### Übung 3 {#descue3}\n\nBeschreiben Sie das Alter der Befragten (`palter`) mit `summary` und erstellen Sie selbst einen Überblick mit Hilfe von `summarise()`, der einen Vergleich des Befragtenalters nach Familienstand erlaubt.\n\n  + Überschreiben Sie zunächst die Missings mit `NA`: \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npend$palter[pend$palter<0] <- NA\npend$famstand[pend$famstand<0] <- NA\n```\n:::\n\n\n\n  \n  + Erstellen Sie einen Überblick mit `summary()`\n  + Erstellen Sie einen Überblick mit dem Minimum, Median, arith. Mittel, Varianz und Maximum der Alterswerte mit Hilfe von `summarise()`\n  + Erweitern Sie diesen Überblick dann so, dass sie einen Vergleich der Kennzahlen für die verschiedenen `famstand`-Kategorien ausgegeben bekommen.\n\n[Zurück nach oben](#ue3_3)\n\n## Hinweise \n\n### Runden mit `round()` {#round}\n\n\nErläuterung: Sie können mit `round(x , 3)` Werte auf eine gewisse Zahl von Ziffern runden. Die zweite Zahl in der Klammer (nach dem Komma) gibt an, wieviele Dezimalstellen wir möchten:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nround(21.12121123,digits = 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 21.121\n```\n\n\n:::\n\n```{.r .cell-code}\nround(21.12121123,digits = 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 21.12121\n```\n\n\n:::\n\n```{.r .cell-code}\nround(21.12121123,digits = 0)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 21\n```\n\n\n:::\n:::\n\n\n\n\nWir können also die relativen Häufigkeiten runden und so die Tabelle von oben übersichtlicher machen: \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nxtabs(~zpsex+statakt, data = pend) %>% \n  prop.table(.,margin = 1) %>% \n  round(.,3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     statakt\nzpsex     1     2     3\n    1 0.470 0.325 0.205\n    2 0.430 0.261 0.309\n```\n\n\n:::\n:::\n",
    "supporting": [
      "03_desc_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}