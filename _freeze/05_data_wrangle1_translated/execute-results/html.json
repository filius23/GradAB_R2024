{
  "hash": "214c36e4c2e646295822d3a4a7fe10cf",
  "result": {
    "engine": "knitr",
    "markdown": "# Data Wrangling I: Labels & factor {#wrang1}\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\npend_kap5 <- haven::read_dta(\"./orig/PENDDAT_cf_W13.dta\",\n                             col_select = c(\"pnr\",\"welle\", \"zpsex\", \"PSM0100\",\"azges1\",\"palter\")) %>% \n  filter(welle == 8, palter > 0,azges1 > 0)\n```\n:::\n\n\n\n\n\n## Labels from Other Programs in R\n\nIn many software packages like Stata or SPSS, labels are often retained through various operations and then displayed automatically. \nThis is not the case in R. \nInstead, in R, we can assign labels using the `factor` variable type. \nThis approach might seem unusual for those who have worked extensively with Stata or SPSS, but it is quite useful in practice if you get accustomed to the workflow.\n\nFor example, when we create a count summary with `count()`, the labels we assign are displayed:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npend_kap5$gender <- factor(pend_kap5$zpsex, \n                            levels = c(1, 2), \n                            labels = c(\"Male\", \"Female\"))\n\n# Counting occurrences and showing labels\npend_kap5 %>% \n  count(gender,zpsex)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 3\n  gender zpsex             n\n  <fct>  <dbl+lbl>     <int>\n1 Male   1 [Maennlich]   324\n2 Female 2 [Weiblich]    359\n```\n\n\n:::\n:::\n\n\n\n\nBy using `factor`, we can efficiently manage and display categorical data.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nView(pend_kap5)\npend_kap5 %>% count(zpsex)\n```\n:::\n\n\n\n\nDiese sind als `attributes()` Variablen zugeordnet:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nattributes(pend_kap5$zpsex)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$label\n[1] \"Steuervariable: Geschlecht des Befragten (aus HHgrid)\"\n\n$format.stata\n[1] \"%42.0g\"\n\n$labels\nItem in Fragebogenversion nicht erhoben             Item in Welle nicht erhoben \n                                    -10                                      -9 \n                      Unplausibler Wert        Frage irrtuemlich nicht gestellt \n                                     -8                                      -4 \n               Trifft nicht zu (Filter)                            Keine Angabe \n                                     -3                                      -2 \n                            Weiss nicht                               Maennlich \n                                     -1                                       1 \n                               Weiblich \n                                      2 \n\n$class\n[1] \"haven_labelled\" \"vctrs_vctr\"     \"double\"        \n```\n\n\n:::\n:::\n\n\n\nWie können wir die Labels `attributes()` verwenden und so Tipparbeit sparen?\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n`{haven}` enthält sich die Funktion `as_factor`[^2], mit der wir aus Labels direkt eine `factor`-Variable erstellen können:\n\n[^2]: Nicht zu verwechseln mit `as.factor()` aus base R - der `_` macht einen Unterschied!\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npend_kap5$zpsex_fct <- as_factor(pend_kap5$zpsex)\n\n# ansehen:\npend_kap5 %>% select(contains(\"zpsex\")) %>% head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 2\n  zpsex         zpsex_fct\n  <dbl+lbl>     <fct>    \n1 2 [Weiblich]  Weiblich \n2 2 [Weiblich]  Weiblich \n3 1 [Maennlich] Maennlich\n4 1 [Maennlich] Maennlich\n5 2 [Weiblich]  Weiblich \n6 1 [Maennlich] Maennlich\n```\n\n\n:::\n:::\n\n\n\n\n## `factor` selbst erstellen oder bearbeiten\n\nAlternativ können wir auch mit `factor()` sowie den Optionen `levels` und `labels` selber labeln. Die `labels` werden dann der Reihenfolge nach den Zahlen aus `levels` zugewiesen.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nattributes(pend_kap5$zpsex)$labels %>% enframe(name = \"label\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 9 × 2\n  label                                   value\n  <chr>                                   <dbl>\n1 Item in Fragebogenversion nicht erhoben   -10\n2 Item in Welle nicht erhoben                -9\n3 Unplausibler Wert                          -8\n4 Frage irrtuemlich nicht gestellt           -4\n5 Trifft nicht zu (Filter)                   -3\n6 Keine Angabe                               -2\n7 Weiss nicht                                -1\n8 Maennlich                                   1\n9 Weiblich                                    2\n```\n\n\n:::\n\n```{.r .cell-code}\npend_kap5$zpsex_fct2 <- factor(pend_kap5$zpsex,\n                               levels = c(1,2),\n                               labels = c(\"Männer\",\"Frauen\"))\n\n# ansehen:\npend_kap5 %>% select(contains(\"zpsex\")) %>% head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 3\n  zpsex         zpsex_fct zpsex_fct2\n  <dbl+lbl>     <fct>     <fct>     \n1 2 [Weiblich]  Weiblich  Frauen    \n2 2 [Weiblich]  Weiblich  Frauen    \n3 1 [Maennlich] Maennlich Männer    \n4 1 [Maennlich] Maennlich Männer    \n5 2 [Weiblich]  Weiblich  Frauen    \n6 1 [Maennlich] Maennlich Männer    \n```\n\n\n:::\n:::\n\n\n\n\n\n\nAußerdem wird aus allen nicht angegebenen `levels` automatisch `NA`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nattributes(pend_kap5$PSM0100)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$label\n[1] \"Nutzung von sozialen Netzwerken?\"\n\n$format.stata\n[1] \"%39.0f\"\n\n$labels\nItem in Fragebogenversion nicht erhoben             Item in Welle nicht erhoben \n                                    -10                                      -9 \n                      Unplausibler Wert                     Nutzt kein Internet \n                                     -8                                      -5 \n       Frage irrtuemlich nicht gestellt                Trifft nicht zu (Filter) \n                                     -4                                      -3 \n                           Keine Angabe                             Weiss nicht \n                                     -2                                      -1 \n                                     Ja                                    Nein \n                                      1                                       2 \n\n$class\n[1] \"haven_labelled\" \"vctrs_vctr\"     \"double\"        \n```\n\n\n:::\n\n```{.r .cell-code}\npend_kap5 %>% select(PSM0100) %>% head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 1\n  PSM0100                 \n  <dbl+lbl>               \n1  2 [Nein]               \n2  1 [Ja]                 \n3  2 [Nein]               \n4 -5 [Nutzt kein Internet]\n5 -5 [Nutzt kein Internet]\n6 -5 [Nutzt kein Internet]\n```\n\n\n:::\n\n```{.r .cell-code}\npend_kap5$PSM0100_fct <- \n  factor(pend_kap5$PSM0100, \n         levels = 1:2, \n         labels = c(\"Nutzt soziale Netzwerke\",\"Nutzt keine soziale Netzwerken\"))\n\n# Ergebnis ansehen:\npend_kap5 %>% select(contains(\"PSM0100\")) %>% head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 2\n  PSM0100                  PSM0100_fct                   \n  <dbl+lbl>                <fct>                         \n1  2 [Nein]                Nutzt keine soziale Netzwerken\n2  1 [Ja]                  Nutzt soziale Netzwerke       \n3  2 [Nein]                Nutzt keine soziale Netzwerken\n4 -5 [Nutzt kein Internet] <NA>                          \n5 -5 [Nutzt kein Internet] <NA>                          \n6 -5 [Nutzt kein Internet] <NA>                          \n```\n\n\n:::\n:::\n\n\n\n\nOder wir nutzen die Funktionen aus `{forcats}` zur recodierung eines `factors`.\n`{forcats}` ist Teil des `{tidyverse}`.\nMit `fct_recode()` können wir die `levels` verändern:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlevels(pend_kap5$PSM0100_fct)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Nutzt soziale Netzwerke\"        \"Nutzt keine soziale Netzwerken\"\n```\n\n\n:::\n\n```{.r .cell-code}\npend_kap5$PSM0100_fct2 <- fct_recode(pend_kap5$PSM0100_fct,\n  `Ja, nutzt soziale Netzwerke` = \"Nutzt soziale Netzwerke\", # bei Leerzeichen `` um die Wörter\n  )\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npend_kap5 %>% select(contains(\"PSM0100\")) %>% head()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 3\n  PSM0100                  PSM0100_fct                    PSM0100_fct2          \n  <dbl+lbl>                <fct>                          <fct>                 \n1  2 [Nein]                Nutzt keine soziale Netzwerken Nutzt keine soziale N…\n2  1 [Ja]                  Nutzt soziale Netzwerke        Ja, nutzt soziale Net…\n3  2 [Nein]                Nutzt keine soziale Netzwerken Nutzt keine soziale N…\n4 -5 [Nutzt kein Internet] <NA>                           <NA>                  \n5 -5 [Nutzt kein Internet] <NA>                           <NA>                  \n6 -5 [Nutzt kein Internet] <NA>                           <NA>                  \n```\n\n\n:::\n:::\n\n\n\n\n[Weitere `fct_....()` Funktionen aus `{forcats}`](#fct_cats), einen Überblick gibt das [Cheatsheet](https://raw.githubusercontent.com/rstudio/cheatsheets/main/factors.pdf).\n\n## Übung\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npend_ue5 <- haven::read_dta(\"./orig/PENDDAT_cf_W13.dta\",\n                               col_select = c(\"pnr\",\"welle\",\"PD0400\")) %>% \n  filter(PD0400>0)\n```\n:::\n\n\n\n\nBearbeiten Sie die *value labels* von `PD0400`: Religiositaet, Selbsteinstufung\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"tabwid\"><style>.cl-9ca338fc{}.cl-9c94b610{font-family:'Red Hat Display';font-size:8pt;font-weight:bold;font-style:normal;text-decoration:none;color:rgba(64, 64, 64, 1.00);background-color:transparent;}.cl-9c94b61a{font-family:'Red Hat Display';font-size:8pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(64, 64, 64, 1.00);background-color:transparent;}.cl-9c9a62a4{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:0;padding-top:0;padding-left:0;padding-right:0;line-height: 1;background-color:transparent;}.cl-9c9a62b8{margin:0;text-align:right;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:0;padding-top:0;padding-left:0;padding-right:0;line-height: 1;background-color:transparent;}.cl-9c9a62c2{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:0;padding-top:0;padding-left:5pt;padding-right:15pt;line-height: 1;background-color:transparent;}.cl-9c9a96f2{width:0.384in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-9c9a96fc{width:1.761in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-9c9a96fd{width:0.384in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-9c9a9706{width:1.761in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-9c9a9707{width:0.384in;background-color:rgba(242, 242, 242, 1.00);vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-9c9a9710{width:1.761in;background-color:rgba(242, 242, 242, 1.00);vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-9c9a9711{width:0.384in;background-color:rgba(242, 242, 242, 1.00);vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-9c9a971a{width:1.761in;background-color:rgba(242, 242, 242, 1.00);vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}</style><table data-quarto-disable-processing='true' class='cl-9ca338fc'><thead><tr style=\"overflow-wrap:break-word;\"><th class=\"cl-9c9a96f2\"><p class=\"cl-9c9a62a4\"><span class=\"cl-9c94b610\">value</span></p></th><th class=\"cl-9c9a96fc\"><p class=\"cl-9c9a62a4\"><span class=\"cl-9c94b610\">label</span></p></th></tr></thead><tbody><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-9c9a96fd\"><p class=\"cl-9c9a62b8\"><span class=\"cl-9c94b61a\">1</span></p></td><td class=\"cl-9c9a9706\"><p class=\"cl-9c9a62c2\"><span class=\"cl-9c94b61a\">Ueberhaupt nicht religioes</span></p></td></tr><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-9c9a9707\"><p class=\"cl-9c9a62b8\"><span class=\"cl-9c94b61a\">2</span></p></td><td class=\"cl-9c9a9710\"><p class=\"cl-9c9a62c2\"><span class=\"cl-9c94b61a\">Eher nicht religioes</span></p></td></tr><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-9c9a96fd\"><p class=\"cl-9c9a62b8\"><span class=\"cl-9c94b61a\">3</span></p></td><td class=\"cl-9c9a9706\"><p class=\"cl-9c9a62c2\"><span class=\"cl-9c94b61a\">Eher religioes</span></p></td></tr><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-9c9a9711\"><p class=\"cl-9c9a62b8\"><span class=\"cl-9c94b61a\">4</span></p></td><td class=\"cl-9c9a971a\"><p class=\"cl-9c9a62c2\"><span class=\"cl-9c94b61a\">Sehr religioes</span></p></td></tr></tbody></table></div>\n```\n\n:::\n:::\n\n\n\n\n\n+ Verschaffen Sie sich zunächst mit `head()` und einer Auszählung mit `count()` einen Überblick.\n+ Wie können Sie die labels aus den `attributes()` mit `as_factor()` in eine Variable `PD0400_fct` übernehmen?\n+ Erstellen Sie einen `factor()` Variable `F411_01_fct2` mit *value labels*: `1 = Überhaupt nicht`, `2 = Eher nicht`,`3 = Eher schon`,`4 = Sehr`\n\n**Bonusübung:** Verwenden Sie die gelabelte Variable für eine Balkengrafik.\n\n## Anhang\n\n### Labels löschen mit `zap_...` aus `{haven}`\n\nHäufig führen die Label-`attributes()` zu Problemen in der weiteren Verarbeitung.\nMit `haven::zap_labels()` können wir die Value labels aus einem Datensatz löschen mit `haven::zap_label()` können wir die Variable labels entfernen.\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npend_kap5\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 683 × 6\n          pnr welle              zpsex         PSM0100             azges1 palter\n        <dbl> <dbl+lbl>          <dbl+lbl>     <dbl+lbl>           <dbl+> <dbl+>\n 1 1000002601 8 [Welle 8 (2014)] 2 [Weiblich]   2 [Nein]           22     34    \n 2 1000010402 8 [Welle 8 (2014)] 2 [Weiblich]   1 [Ja]             40     30    \n 3 1000019102 8 [Welle 8 (2014)] 1 [Maennlich]  2 [Nein]           40     34    \n 4 1000031403 8 [Welle 8 (2014)] 1 [Maennlich] -5 [Nutzt kein Int… 44     52    \n 5 1000032801 8 [Welle 8 (2014)] 2 [Weiblich]  -5 [Nutzt kein Int… 44     58    \n 6 1000032802 8 [Welle 8 (2014)] 1 [Maennlich] -5 [Nutzt kein Int… 43     62    \n 7 1000038201 8 [Welle 8 (2014)] 1 [Maennlich]  1 [Ja]             43     61    \n 8 1000040003 8 [Welle 8 (2014)] 1 [Maennlich]  2 [Nein]           36     40    \n 9 1000051801 8 [Welle 8 (2014)] 2 [Weiblich]   2 [Nein]           31     44    \n10 1000053101 8 [Welle 8 (2014)] 1 [Maennlich]  1 [Ja]             27     47    \n# ℹ 673 more rows\n```\n\n\n:::\n\n```{.r .cell-code}\npend_kap5 %>% \n  haven::zap_labels() # value labels raus\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 683 × 6\n          pnr welle zpsex PSM0100 azges1 palter\n        <dbl> <dbl> <dbl>   <dbl>  <dbl>  <dbl>\n 1 1000002601     8     2       2     22     34\n 2 1000010402     8     2       1     40     30\n 3 1000019102     8     1       2     40     34\n 4 1000031403     8     1      -5     44     52\n 5 1000032801     8     2      -5     44     58\n 6 1000032802     8     1      -5     43     62\n 7 1000038201     8     1       1     43     61\n 8 1000040003     8     1       2     36     40\n 9 1000051801     8     2       2     31     44\n10 1000053101     8     1       1     27     47\n# ℹ 673 more rows\n```\n\n\n:::\n:::\n\n\n\n\n\n### Labels selbst erstellen und ranspielen\n\nEin alternativer Weg geht über einen kleinen Label-`data.frame` und `left_join()` (mehr zu `left_join()` später.)\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntab2 <- pend_kap5 %>% count(PSM0100)\ntab2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  PSM0100                      n\n  <dbl+lbl>                <int>\n1 -5 [Nutzt kein Internet]    28\n2  1 [Ja]                    318\n3  2 [Nein]                  337\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlab_df <- data.frame(PSM0100=1:2)\nlab_df\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  PSM0100\n1       1\n2       2\n```\n\n\n:::\n\n```{.r .cell-code}\nlab_df$PD0400_lab <- factor(lab_df$PSM0100,levels = 1:2,\n                           labels = c(\"Nutzt soziale Netzwerke\",\n                                      \"Nutzt keine soziale Netzwerken\"))\nlab_df\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  PSM0100                     PD0400_lab\n1       1        Nutzt soziale Netzwerke\n2       2 Nutzt keine soziale Netzwerken\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntab2 %>% \n  left_join(lab_df,by = \"PSM0100\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 3\n  PSM0100                      n PD0400_lab                    \n  <dbl+lbl>                <int> <fct>                         \n1 -5 [Nutzt kein Internet]    28 <NA>                          \n2  1 [Ja]                    318 Nutzt soziale Netzwerke       \n3  2 [Nein]                  337 Nutzt keine soziale Netzwerken\n```\n\n\n:::\n:::\n\n\n\n\n### Labels in R erstellen und nach bspw. Stata exportieren\nWenn wir aber beispielsweise einen Datensatz für Stata labeln wollen, hilft uns wieder `{labelled}`:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(labelled)\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in library(labelled): es gibt kein Paket namens 'labelled'\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npend_kap5$zpsex_num2 <- as.numeric(pend_kap5$zpsex)\nattributes(pend_kap5$zpsex_num2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNULL\n```\n\n\n:::\n\n```{.r .cell-code}\nval_labels(pend_kap5$zpsex_num2) <- c(\"Männer\"=1,\"Frauen\"=2)\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in val_labels(pend_kap5$zpsex_num2) <- c(Männer = 1, Frauen = 2): konnte Funktion \"val_labels<-\" nicht finden\n```\n\n\n:::\n\n```{.r .cell-code}\nattributes(pend_kap5$zpsex_num2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNULL\n```\n\n\n:::\n\n```{.r .cell-code}\npend_kap5 %>% count(zpsex_num2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 2\n  zpsex_num2     n\n       <dbl> <int>\n1          1   324\n2          2   359\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npend_kap5 %>% \n  select(zpsex_num2) %>% \n  haven::write_dta(.,path = \"./data/pend_kap5.dta\")\n```\n:::\n\n\n\n\n...in *Stata*:\n\n\n\n::: {.cell}\n\n```{.stata .cell-code}\nuse \"./data/pend_kap5.dta\" \ntab zpsex_num2 \n```\n\n\n::: {.cell-output .cell-output-stdout}\n\n```\n(PASS V3, 2006-2019, 21 Jul 2021, PENDDAT)\n\n\n zpsex_num2 |      Freq.     Percent        Cum.\n------------+-----------------------------------\n     Männer |        324       47.44       47.44\n     Frauen |        359       52.56      100.00\n------------+-----------------------------------\n      Total |        683      100.00\n```\n\n\n:::\n:::\n\n\n\n\n[Mehr zu `labels` in `{labelled}`](https://joseph.larmarange.net/intro_labelled.html).\n\n<!-- factors stellen eine strukturierte Beziehung zwischen den verschiedenen Ebenen (Werten) einer kategorialen Variable her, wie z. B. Wochentage oder Antworten auf eine Frage in einer Umfrage. Auf diese Weise lässt sich leichter erkennen, wie sich ein Element zu den anderen Elementen in einer Spalte verhält. Obwohl factors wie Zeichenvektoren aussehen (und sich oft auch so verhalten), werden sie von R als Ganzzahlvektoren behandelt. Sie müssen also sehr vorsichtig sein, wenn Sie sie als Strings behandeln. -->\n\n<!-- Einmal erstellt, können factors nur einen vordefinierten Satz von Werten enthalten, die als Ebenen bezeichnet werden. Standardmäßig sortiert R die Ebenen immer in alphabetischer Reihenfolge. Wenn Sie zum Beispiel einen Faktor mit 2 Ebenen haben: -->\n\n\n",
    "supporting": [
      "05_data_wrangle1_translated_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"site_libs/tabwid-1.1.3/tabwid.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/tabwid-1.1.3/tabwid.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}